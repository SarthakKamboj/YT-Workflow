{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\components\\\\WorkflowDescription.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/scss/workflow-description.module.scss';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nvar WorkflowDescription = function WorkflowDescription(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useState = useState(),\n      description = _useState[0],\n      setDescription = _useState[1];\n\n  var jwtToken = useSelector(function (state) {\n    return state.jwtToken;\n  });\n\n  var _useState2 = useState(false),\n      fetched = _useState2[0],\n      setFetched = _useState2[1]; // const updateDescription = (e) => {\n  // \tsetDescription(e.target.value);\n  // };\n\n\n  useEffect(function () {\n    // if (!fetched) {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var descRes, descJson;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://127.0.0.1:8000/get-workflow-description/\".concat(id), {\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: \"Bearer \".concat(jwtToken)\n                  }\n                });\n\n              case 2:\n                descRes = _context.sent;\n                _context.next = 5;\n                return descRes.json();\n\n              case 5:\n                descJson = _context.sent;\n                console.log(descJson['description']);\n                setDescription(descJson['description']);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData(); // \tsetFetched(true);\n    // }\n    // .then((res) => res.json())\n    // .then((res) => {\n    // \tconsole.log(res.description);\n    // \tsetDescription(res.description);\n    // })\n    // .catch((err) => console.log(err));\n  }, [description]);\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }\n  }, __jsx(\"h2\", {\n    className: styles.descriptionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }\n  }, \"Description\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }\n  }), __jsx(\"textarea\", {\n    name: \"description\",\n    className: styles.description,\n    defaultValue: description ? description : 'none',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }));\n};\n\n_s(WorkflowDescription, \"6L54vKxkx5ZIHF41y8+ejbPKG+s=\", false, function () {\n  return [useSelector];\n});\n\n_c = WorkflowDescription;\nexport default WorkflowDescription;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkflowDescription\");","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/components/WorkflowDescription.js"],"names":["styles","useState","useEffect","useSelector","WorkflowDescription","id","description","setDescription","jwtToken","state","fetched","setFetched","fetchData","fetch","headers","Authorization","descRes","json","descJson","console","log","descriptionTitle"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,iDAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAY;AAAA;;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACCJ,QAAQ,EADT;AAAA,MAC/BK,WAD+B;AAAA,MAClBC,cADkB;;AAEvC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACD,QAAjB;AAAA,GAAD,CAA5B;;AAFuC,mBAGPP,QAAQ,CAAC,KAAD,CAHD;AAAA,MAG/BS,OAH+B;AAAA,MAGtBC,UAHsB,kBAIvC;AACA;AACA;;;AACAT,EAAAA,SAAS,CACR,YAAM;AACL;AADK,aAEUU,SAFV;AAAA;AAAA;;AAAA;AAAA,4EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuBC,KAAK,0DAAmDR,EAAnD,GAAyD;AACnFS,kBAAAA,OAAO,EAAE;AACR,oCAAgB,kBADR;AAERC,oBAAAA,aAAa,mBAAYP,QAAZ;AAFL;AAD0E,iBAAzD,CAD5B;;AAAA;AACOQ,gBAAAA,OADP;AAAA;AAAA,uBAOwBA,OAAO,CAACC,IAAR,EAPxB;;AAAA;AAOOC,gBAAAA,QAPP;AAQCC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAAC,aAAD,CAApB;AACAX,gBAAAA,cAAc,CAACW,QAAQ,CAAC,aAAD,CAAT,CAAd;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFK;AAAA;AAAA;;AAaLN,IAAAA,SAAS,GAbJ,CAcL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAvBO,EAwBR,CAAEN,WAAF,CAxBQ,CAAT;AA0BA,SACC,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAI,IAAA,SAAS,EAAEN,MAAM,CAACqB,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AACC,IAAA,IAAI,EAAC,aADN;AAEC,IAAA,SAAS,EAAErB,MAAM,CAACM,WAFnB;AAGC,IAAA,YAAY,EAAEA,WAAW,GAAGA,WAAH,GAAiB,MAH3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD;AAWA,CA5CD;;GAAMF,mB;UAEYD,W;;;KAFZC,mB;AA8CN,eAAeA,mBAAf","sourcesContent":["import styles from '../styles/scss/workflow-description.module.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst WorkflowDescription = ({ id }) => {\r\n\tconst [ description, setDescription ] = useState();\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\tconst [ fetched, setFetched ] = useState(false);\r\n\t// const updateDescription = (e) => {\r\n\t// \tsetDescription(e.target.value);\r\n\t// };\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if (!fetched) {\r\n\t\t\tasync function fetchData() {\r\n\t\t\t\tconst descRes = await fetch(`http://127.0.0.1:8000/get-workflow-description/${id}`, {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\tAuthorization: `Bearer ${jwtToken}`\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tconst descJson = await descRes.json();\r\n\t\t\t\tconsole.log(descJson['description']);\r\n\t\t\t\tsetDescription(descJson['description']);\r\n\t\t\t}\r\n\t\t\tfetchData();\r\n\t\t\t// \tsetFetched(true);\r\n\t\t\t// }\r\n\t\t\t// .then((res) => res.json())\r\n\t\t\t// .then((res) => {\r\n\t\t\t// \tconsole.log(res.description);\r\n\t\t\t// \tsetDescription(res.description);\r\n\t\t\t// })\r\n\t\t\t// .catch((err) => console.log(err));\r\n\t\t},\r\n\t\t[ description ]\r\n\t);\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h2 className={styles.descriptionTitle}>Description</h2>\r\n\t\t\t<br />\r\n\t\t\t<textarea\r\n\t\t\t\tname=\"description\"\r\n\t\t\t\tclassName={styles.description}\r\n\t\t\t\tdefaultValue={description ? description : 'none'}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default WorkflowDescription;\r\n"]},"metadata":{},"sourceType":"module"}