{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\dashboard\\\\workflows.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/scss/workflows.module.scss';\nimport classnames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setProfileImage } from '../../components/actions/profileImageActions';\nimport { setProfileName } from '../../components/actions/profileNameActions';\nimport { setJwt } from '../../components/actions/jwtAction';\nimport { setWorkflowInfo } from '../../components/actions/workflowInfo';\nimport DashboardMenu from '../../components/DashboardMenu';\nimport WorkflowItem from '../../components/WorkflowItem';\nimport Router from 'next/router';\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal';\n\nconst Dashboard = () => {\n  // const currentProfileImage = useSelector((state) => state.profileImage);\n  console.log('dashboard');\n  const {\n    0: workflows,\n    1: setWorkflows\n  } = useState(null);\n  const {\n    0: displayModal,\n    1: setDisplayModal\n  } = useState(false);\n  const jwtToken = useSelector(state => state.jwtToken);\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  console.log(state);\n\n  const setWorkflowIdsInLocalStorage = workflowsInfo => {\n    const workflowIds = workflowsInfo.map(workflowInfo => workflowInfo.id);\n\n    if (!localStorage.getItem('workflowIds')) {\n      localStorage.setItem('workflowIds', workflowIds);\n    }\n\n    console.log(workflowIds);\n  };\n\n  const getNewJwtToken = async () => {\n    const refreshToken = localStorage.getItem('refresh-token');\n    const data = {\n      refresh: refreshToken\n    };\n    const dataStringified = JSON.stringify(data);\n    const newAccessTokenRes = await fetch('http://127.0.0.1:8000/api/refresh', {\n      method: 'POST',\n      body: dataStringified,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const newAccessTokenJson = await newAccessTokenRes.json();\n\n    if (newAccessTokenJson.detail === 'Token is invalid or expired') {\n      localStorage.setItem('refresh-token', '');\n      dispatch(setJwt(''));\n      setJwtInJS('');\n      return Router.push('/');\n    }\n\n    const newJwtToken = newAccessTokenJson.access;\n    dispatch(setJwt(newJwtToken));\n    localStorage.setItem('jwt', newJwtToken);\n    setJwtInJS(newJwtToken);\n    const workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\n      headers: {\n        Authorization: 'Bearer ' + newJwtToken\n      }\n    });\n    const workflowsJson = await workflowsResponse.json();\n    setWorkflows(workflowsJson['workflows']);\n    dispatch(setWorkflowInfo(workflowsJson['workflows']));\n    setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\n  };\n\n  const getWorkflows = async () => {\n    const jwtBearerString = 'Bearer ' + jwtToken;\n    const workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\n      headers: {\n        Authorization: jwtBearerString\n      }\n    });\n    const workflowsJson = await workflowsResponse.json(); // workflowsJson.code's existence means the jwt token was invalid\n\n    if (workflowsJson.code) {\n      await getNewJwtToken();\n      return;\n    }\n\n    setWorkflows(workflowsJson['workflows']);\n    dispatch(setWorkflowInfo(workflowsJson['workflows']));\n    setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\n  };\n\n  useEffect(() => {\n    console.log('use effect');\n    getWorkflows();\n  }, []);\n\n  const toggleModalVisibility = () => {\n    setDisplayModal(!displayModal);\n  };\n\n  return __jsx(\"main\", {\n    className: styles.workflowsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.workflowsMenuContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }\n  }, __jsx(DashboardMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    className: styles.workflowsBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }\n  }, !workflows ? __jsx(\"p\", {\n    className: styles.noWorkflows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 6\n    }\n  }, \"You don't have any workflows. Let's get one started!\") : __jsx(\"div\", {\n    className: styles.workflowList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 6\n    }\n  }, workflows.map(workflow => __jsx(WorkflowItem, {\n    workflow: workflow,\n    key: workflow.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 36\n    }\n  }))), __jsx(\"div\", {\n    className: styles.addWorkflowBtn,\n    onClick: () => toggleModalVisibility(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, \"Add Workflow\")));\n}; // export async function getStaticProps() {\n// const profileImage = 'https://i.imgur.com/0byOhwQ.jpg';\n// const profileName = 'Sarthak Kamboj';\n// return {\n// \tprops: {\n// \t\tprofileImage,\n// \t\tprofileName\n// \t}\n// };\n// }\n\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/dashboard/workflows.js"],"names":["styles","classnames","useEffect","useState","useSelector","useDispatch","setProfileImage","setProfileName","setJwt","setWorkflowInfo","DashboardMenu","WorkflowItem","Router","CreateWorkflowModal","Dashboard","console","log","workflows","setWorkflows","displayModal","setDisplayModal","jwtToken","state","dispatch","setWorkflowIdsInLocalStorage","workflowsInfo","workflowIds","map","workflowInfo","id","localStorage","getItem","setItem","getNewJwtToken","refreshToken","data","refresh","dataStringified","JSON","stringify","newAccessTokenRes","fetch","method","body","headers","newAccessTokenJson","json","detail","setJwtInJS","push","newJwtToken","access","workflowsResponse","Authorization","workflowsJson","getWorkflows","jwtBearerString","code","toggleModalVisibility","workflowsContainer","workflowsMenuContainer","workflowsBody","noWorkflows","workflowList","workflow","addWorkflowBtn"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,yCAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,8CAAhC;AACA,SAASC,cAAT,QAA+B,6CAA/B;AACA,SAASC,MAAT,QAAuB,oCAAvB;AACA,SAASC,eAAT,QAAgC,uCAAhC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAM;AAAA,OAAEC,SAAF;AAAA,OAAaC;AAAb,MAA8Bf,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAA,OAAEgB,YAAF;AAAA,OAAgBC;AAAhB,MAAoCjB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAMkB,QAAQ,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAME,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAMiB,KAAK,GAAGlB,WAAW,CAAEkB,KAAD,IAAWA,KAAZ,CAAzB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;;AAEA,QAAME,4BAA4B,GAAIC,aAAD,IAAmB;AACvD,UAAMC,WAAW,GAAGD,aAAa,CAACE,GAAd,CAAmBC,YAAD,IAAkBA,YAAY,CAACC,EAAjD,CAApB;;AACA,QAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAL,EAA0C;AACzCD,MAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCN,WAApC;AACA;;AACDX,IAAAA,OAAO,CAACC,GAAR,CAAYU,WAAZ;AACA,GAND;;AAQA,QAAMO,cAAc,GAAG,YAAY;AAClC,UAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqB,eAArB,CAArB;AACA,UAAMI,IAAI,GAAG;AACZC,MAAAA,OAAO,EAAEF;AADG,KAAb;AAGA,UAAMG,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAxB;AACA,UAAMK,iBAAiB,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AAC1EC,MAAAA,MAAM,EAAE,MADkE;AAE1EC,MAAAA,IAAI,EAAEN,eAFoE;AAG1EO,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAHiE,KAAtC,CAArC;AAOA,UAAMC,kBAAkB,GAAG,MAAML,iBAAiB,CAACM,IAAlB,EAAjC;;AACA,QAAID,kBAAkB,CAACE,MAAnB,KAA8B,6BAAlC,EAAiE;AAChEjB,MAAAA,YAAY,CAACE,OAAb,CAAqB,eAArB,EAAsC,EAAtC;AACAT,MAAAA,QAAQ,CAACf,MAAM,CAAC,EAAD,CAAP,CAAR;AACAwC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACA,aAAOpC,MAAM,CAACqC,IAAP,CAAY,GAAZ,CAAP;AACA;;AACD,UAAMC,WAAW,GAAGL,kBAAkB,CAACM,MAAvC;AACA5B,IAAAA,QAAQ,CAACf,MAAM,CAAC0C,WAAD,CAAP,CAAR;AACApB,IAAAA,YAAY,CAACE,OAAb,CAAqB,KAArB,EAA4BkB,WAA5B;AACAF,IAAAA,UAAU,CAACE,WAAD,CAAV;AACA,UAAME,iBAAiB,GAAG,MAAMX,KAAK,CAAC,qCAAD,EAAwC;AAC5EG,MAAAA,OAAO,EAAE;AACRS,QAAAA,aAAa,EAAE,YAAYH;AADnB;AADmE,KAAxC,CAArC;AAKA,UAAMI,aAAa,GAAG,MAAMF,iBAAiB,CAACN,IAAlB,EAA5B;AACA5B,IAAAA,YAAY,CAACoC,aAAa,CAAC,WAAD,CAAd,CAAZ;AACA/B,IAAAA,QAAQ,CAACd,eAAe,CAAC6C,aAAa,CAAC,WAAD,CAAd,CAAhB,CAAR;AACA9B,IAAAA,4BAA4B,CAAC8B,aAAa,CAAC,WAAD,CAAd,CAA5B;AACA,GAjCD;;AAmCA,QAAMC,YAAY,GAAG,YAAY;AAChC,UAAMC,eAAe,GAAG,YAAYnC,QAApC;AACA,UAAM+B,iBAAiB,GAAG,MAAMX,KAAK,CAAC,qCAAD,EAAwC;AAC5EG,MAAAA,OAAO,EAAE;AACRS,QAAAA,aAAa,EAAEG;AADP;AADmE,KAAxC,CAArC;AAKA,UAAMF,aAAa,GAAG,MAAMF,iBAAiB,CAACN,IAAlB,EAA5B,CAPgC,CAShC;;AACA,QAAIQ,aAAa,CAACG,IAAlB,EAAwB;AACvB,YAAMxB,cAAc,EAApB;AACA;AACA;;AACDf,IAAAA,YAAY,CAACoC,aAAa,CAAC,WAAD,CAAd,CAAZ;AACA/B,IAAAA,QAAQ,CAACd,eAAe,CAAC6C,aAAa,CAAC,WAAD,CAAd,CAAhB,CAAR;AACA9B,IAAAA,4BAA4B,CAAC8B,aAAa,CAAC,WAAD,CAAd,CAA5B;AACA,GAjBD;;AAmBApD,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAuC,IAAAA,YAAY;AACZ,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMG,qBAAqB,GAAG,MAAM;AACnCtC,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACA,GAFD;;AAIA,SACC;AAAM,IAAA,SAAS,EAAEnB,MAAM,CAAC2D,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAE3D,MAAM,CAAC4D,sBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,EAIC;AAAK,IAAA,SAAS,EAAE5D,MAAM,CAAC6D,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC5C,SAAD,GACA;AAAG,IAAA,SAAS,EAAEjB,MAAM,CAAC8D,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADA,GAGA;AAAK,IAAA,SAAS,EAAE9D,MAAM,CAAC+D,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE9C,SAAS,CAACU,GAAV,CAAeqC,QAAD,IAAc,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEA,QAAxB;AAAkC,IAAA,GAAG,EAAEA,QAAQ,CAACnC,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,CADF,CAJF,EAQC;AAAK,IAAA,SAAS,EAAE7B,MAAM,CAACiE,cAAvB;AAAuC,IAAA,OAAO,EAAE,MAAMP,qBAAqB,EAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARD,CAJD,CADD;AAqBA,CAtGD,C,CAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe5C,SAAf","sourcesContent":["import styles from '../../styles/scss/workflows.module.scss';\r\nimport classnames from 'classnames';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setProfileImage } from '../../components/actions/profileImageActions';\r\nimport { setProfileName } from '../../components/actions/profileNameActions';\r\nimport { setJwt } from '../../components/actions/jwtAction';\r\nimport { setWorkflowInfo } from '../../components/actions/workflowInfo';\r\nimport DashboardMenu from '../../components/DashboardMenu';\r\nimport WorkflowItem from '../../components/WorkflowItem';\r\nimport Router from 'next/router';\r\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal';\r\n\r\nconst Dashboard = () => {\r\n\t// const currentProfileImage = useSelector((state) => state.profileImage);\r\n\tconsole.log('dashboard');\r\n\tconst [ workflows, setWorkflows ] = useState(null);\r\n\tconst [ displayModal, setDisplayModal ] = useState(false);\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector((state) => state);\r\n\tconsole.log(state);\r\n\r\n\tconst setWorkflowIdsInLocalStorage = (workflowsInfo) => {\r\n\t\tconst workflowIds = workflowsInfo.map((workflowInfo) => workflowInfo.id);\r\n\t\tif (!localStorage.getItem('workflowIds')) {\r\n\t\t\tlocalStorage.setItem('workflowIds', workflowIds);\r\n\t\t}\r\n\t\tconsole.log(workflowIds);\r\n\t};\r\n\r\n\tconst getNewJwtToken = async () => {\r\n\t\tconst refreshToken = localStorage.getItem('refresh-token');\r\n\t\tconst data = {\r\n\t\t\trefresh: refreshToken\r\n\t\t};\r\n\t\tconst dataStringified = JSON.stringify(data);\r\n\t\tconst newAccessTokenRes = await fetch('http://127.0.0.1:8000/api/refresh', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: dataStringified,\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst newAccessTokenJson = await newAccessTokenRes.json();\r\n\t\tif (newAccessTokenJson.detail === 'Token is invalid or expired') {\r\n\t\t\tlocalStorage.setItem('refresh-token', '');\r\n\t\t\tdispatch(setJwt(''));\r\n\t\t\tsetJwtInJS('');\r\n\t\t\treturn Router.push('/');\r\n\t\t}\r\n\t\tconst newJwtToken = newAccessTokenJson.access;\r\n\t\tdispatch(setJwt(newJwtToken));\r\n\t\tlocalStorage.setItem('jwt', newJwtToken);\r\n\t\tsetJwtInJS(newJwtToken);\r\n\t\tconst workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + newJwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst workflowsJson = await workflowsResponse.json();\r\n\t\tsetWorkflows(workflowsJson['workflows']);\r\n\t\tdispatch(setWorkflowInfo(workflowsJson['workflows']));\r\n\t\tsetWorkflowIdsInLocalStorage(workflowsJson['workflows']);\r\n\t};\r\n\r\n\tconst getWorkflows = async () => {\r\n\t\tconst jwtBearerString = 'Bearer ' + jwtToken;\r\n\t\tconst workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: jwtBearerString\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst workflowsJson = await workflowsResponse.json();\r\n\r\n\t\t// workflowsJson.code's existence means the jwt token was invalid\r\n\t\tif (workflowsJson.code) {\r\n\t\t\tawait getNewJwtToken();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetWorkflows(workflowsJson['workflows']);\r\n\t\tdispatch(setWorkflowInfo(workflowsJson['workflows']));\r\n\t\tsetWorkflowIdsInLocalStorage(workflowsJson['workflows']);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('use effect');\r\n\t\tgetWorkflows();\r\n\t}, []);\r\n\r\n\tconst toggleModalVisibility = () => {\r\n\t\tsetDisplayModal(!displayModal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<main className={styles.workflowsContainer}>\r\n\t\t\t<div className={styles.workflowsMenuContainer}>\r\n\t\t\t\t<DashboardMenu />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.workflowsBody}>\r\n\t\t\t\t{!workflows ? (\r\n\t\t\t\t\t<p className={styles.noWorkflows}>You don't have any workflows. Let's get one started!</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className={styles.workflowList}>\r\n\t\t\t\t\t\t{workflows.map((workflow) => <WorkflowItem workflow={workflow} key={workflow.id} />)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t<div className={styles.addWorkflowBtn} onClick={() => toggleModalVisibility()}>\r\n\t\t\t\t\tAdd Workflow\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <CreateWorkflowModal displayModal={displayModal} toggleModalVisibility={toggleModalVisibility} /> */}\r\n\t\t\t\t{/* <Link href=\"\" */}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\n// export async function getStaticProps() {\r\n// const profileImage = 'https://i.imgur.com/0byOhwQ.jpg';\r\n// const profileName = 'Sarthak Kamboj';\r\n// return {\r\n// \tprops: {\r\n// \t\tprofileImage,\r\n// \t\tprofileName\r\n// \t}\r\n// };\r\n// }\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}