{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\components\\\\Share.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport styles from '../styles/scss/share.module.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport Joi from '@hapi/joi';\n\nconst Share = ({\n  id\n}) => {\n  const jwtToken = useSelector(state => state.jwtToken);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState();\n  const {\n    0: hideContent,\n    1: setHideContent\n  } = useState();\n  const {\n    0: inputActive,\n    1: setInputActive\n  } = useState();\n  const {\n    0: inputText,\n    1: setInputText\n  } = useState('');\n  const {\n    0: profileImagesInfo,\n    1: setProfileImagesInfo\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const schema = Joi.object({\n    email: Joi.string().email({\n      minDomainSegments: 2,\n      tlds: {\n        allow: ['com', 'net']\n      }\n    })\n  }); // const inputText = useRef();\n\n  const getProfileImages = async () => {\n    const imageUrlsRes = await fetch(`http://localhost:8000/get-workflow-profile-images/${id}`, {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + jwtToken\n      }\n    });\n    const imageUrlsJson = await imageUrlsRes.json();\n    setProfileImagesInfo(Object.entries(imageUrlsJson['urls']));\n  };\n\n  useEffect(() => {\n    setModalVisible(false);\n    setHideContent(true);\n    setInputActive(false);\n    getProfileImages();\n  }, []);\n\n  const shareWorkflow = async () => {\n    const validation = schema.validate({\n      email: inputText\n    });\n\n    if (validation.error) {\n      setError(validation.error.toString().replace('ValidationError: ', '').replace(`\"`, ``).replace(`\"`, '').toUpperCase());\n    }\n    /*\r\n    fetch(`http://localhost:8000/share-workflow/${id}`, {\r\n    \tmethod: 'POST',\r\n    \theaders: {\r\n    \t\t'Content-Type': 'application/json',\r\n    \t\tAuthorization: 'Bearer ' + jwtToken\r\n    \t},\r\n    \tbody: JSON.stringify({\r\n    \t\temail: inputText\r\n    \t})\r\n    });*/\n\n  };\n\n  const toggleModal = () => {\n    if (!modalVisible) {\n      setTimeout(() => {\n        setHideContent(false);\n      }, 250);\n    } else {\n      setHideContent(true);\n    }\n\n    setModalVisible(!modalVisible);\n  };\n\n  const toggleInputActive = () => {\n    setInputActive(!inputActive);\n  };\n\n  const updateInputText = e => {\n    setInputText(e.target.value);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: classnames({\n      [styles.shareModalNotVisible]: true,\n      [styles.shareModalVisible]: modalVisible,\n      [styles.contentsHidden]: hideContent\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 4\n    }\n  }, __jsx(\"p\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: \"user-plus\",\n    className: styles.addUserIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 6\n    }\n  }), __jsx(\"span\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 6\n    }\n  }, \"Share with Other People\")), __jsx(\"div\", {\n    className: styles.inputSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    onClick: toggleInputActive,\n    onBlur: toggleInputActive,\n    type: \"email\",\n    className: styles.emailInput,\n    onChange: updateInputText,\n    value: inputText // ref={inputText}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 6\n    }\n  }), __jsx(\"div\", {\n    className: classnames({\n      [styles.inputBorderBottom]: true,\n      [styles.inputBorderBottomActive]: inputActive\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 6\n    }\n  }), __jsx(\"p\", {\n    className: classnames({\n      [styles.hoverLabel]: inputText !== ''\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 6\n    }\n  }, \"Add People\")), __jsx(\"p\", {\n    className: styles.usersHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, \"Current Users\"), __jsx(\"ul\", {\n    className: styles.workflowUsersList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, profileImagesInfo.map(profileImageInfo => __jsx(\"li\", {\n    key: profileImageInfo[0],\n    className: styles.workflowUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: profileImageInfo[1],\n    className: styles.workflowUserProfileImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 8\n    }\n  }), __jsx(\"p\", {\n    className: styles.workflowUserEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 8\n    }\n  }, profileImageInfo[0])))), error, __jsx(\"div\", {\n    className: styles.shareBtn,\n    onClick: shareWorkflow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, \"Done\")), __jsx(\"div\", {\n    onClick: toggleModal,\n    className: classnames({\n      [styles.backdropNotVisible]: true,\n      [styles.backdropVisible]: modalVisible\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }\n  }), __jsx(\"div\", {\n    className: styles.shareBtn,\n    onClick: () => toggleModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: \"users\",\n    className: styles.shareIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, \"Share\")));\n};\n\nexport default Share;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/components/Share.js"],"names":["FontAwesomeIcon","styles","useState","useEffect","useRef","classnames","useSelector","Joi","Share","id","jwtToken","state","modalVisible","setModalVisible","hideContent","setHideContent","inputActive","setInputActive","inputText","setInputText","profileImagesInfo","setProfileImagesInfo","error","setError","schema","object","email","string","minDomainSegments","tlds","allow","getProfileImages","imageUrlsRes","fetch","headers","Authorization","imageUrlsJson","json","Object","entries","shareWorkflow","validation","validate","toString","replace","toUpperCase","toggleModal","setTimeout","toggleInputActive","updateInputText","e","target","value","shareModalNotVisible","shareModalVisible","contentsHidden","title","addUserIcon","heading","inputSection","emailInput","inputBorderBottom","inputBorderBottomActive","hoverLabel","usersHeading","workflowUsersList","map","profileImageInfo","workflowUsers","workflowUserProfileImage","workflowUserEmail","shareBtn","backdropNotVisible","backdropVisible","shareIcon"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport styles from '../styles/scss/share.module.scss';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport classnames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport Joi from '@hapi/joi';\r\n\r\nconst Share = ({ id }) => {\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\tconst [ modalVisible, setModalVisible ] = useState();\r\n\tconst [ hideContent, setHideContent ] = useState();\r\n\tconst [ inputActive, setInputActive ] = useState();\r\n\tconst [ inputText, setInputText ] = useState('');\r\n\r\n\tconst [ profileImagesInfo, setProfileImagesInfo ] = useState([]);\r\n\tconst [ error, setError ] = useState('');\r\n\r\n\tconst schema = Joi.object({\r\n\t\temail: Joi.string().email({ minDomainSegments: 2, tlds: { allow: [ 'com', 'net' ] } })\r\n\t});\r\n\r\n\t// const inputText = useRef();\r\n\r\n\tconst getProfileImages = async () => {\r\n\t\tconst imageUrlsRes = await fetch(`http://localhost:8000/get-workflow-profile-images/${id}`, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst imageUrlsJson = await imageUrlsRes.json();\r\n\t\tsetProfileImagesInfo(Object.entries(imageUrlsJson['urls']));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetModalVisible(false);\r\n\t\tsetHideContent(true);\r\n\t\tsetInputActive(false);\r\n\t\tgetProfileImages();\r\n\t}, []);\r\n\r\n\tconst shareWorkflow = async () => {\r\n\t\tconst validation = schema.validate({ email: inputText });\r\n\t\tif (validation.error) {\r\n\t\t\tsetError(\r\n\t\t\t\tvalidation.error\r\n\t\t\t\t\t.toString()\r\n\t\t\t\t\t.replace('ValidationError: ', '')\r\n\t\t\t\t\t.replace(`\"`, ``)\r\n\t\t\t\t\t.replace(`\"`, '')\r\n\t\t\t\t\t.toUpperCase()\r\n\t\t\t);\r\n\t\t}\r\n\t\t/*\r\n\t\tfetch(`http://localhost:8000/share-workflow/${id}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\temail: inputText\r\n\t\t\t})\r\n\t\t});*/\r\n\t};\r\n\r\n\tconst toggleModal = () => {\r\n\t\tif (!modalVisible) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetHideContent(false);\r\n\t\t\t}, 250);\r\n\t\t} else {\r\n\t\t\tsetHideContent(true);\r\n\t\t}\r\n\t\tsetModalVisible(!modalVisible);\r\n\t};\r\n\r\n\tconst toggleInputActive = () => {\r\n\t\tsetInputActive(!inputActive);\r\n\t};\r\n\r\n\tconst updateInputText = (e) => {\r\n\t\tsetInputText(e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div\r\n\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t[styles.shareModalNotVisible]: true,\r\n\t\t\t\t\t[styles.shareModalVisible]: modalVisible,\r\n\t\t\t\t\t[styles.contentsHidden]: hideContent\r\n\t\t\t\t})}\r\n\t\t\t>\r\n\t\t\t\t<p className={styles.title}>\r\n\t\t\t\t\t<FontAwesomeIcon icon=\"user-plus\" className={styles.addUserIcon} />\r\n\t\t\t\t\t<span className={styles.heading}>Share with Other People</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className={styles.inputSection}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonClick={toggleInputActive}\r\n\t\t\t\t\t\tonBlur={toggleInputActive}\r\n\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\tclassName={styles.emailInput}\r\n\t\t\t\t\t\tonChange={updateInputText}\r\n\t\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t\t\t// ref={inputText}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t\t\t[styles.inputBorderBottom]: true,\r\n\t\t\t\t\t\t\t[styles.inputBorderBottomActive]: inputActive\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<p className={classnames({ [styles.hoverLabel]: inputText !== '' })}>Add People</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p className={styles.usersHeading}>Current Users</p>\r\n\t\t\t\t<ul className={styles.workflowUsersList}>\r\n\t\t\t\t\t{profileImagesInfo.map((profileImageInfo) => (\r\n\t\t\t\t\t\t<li key={profileImageInfo[0]} className={styles.workflowUsers}>\r\n\t\t\t\t\t\t\t<img src={profileImageInfo[1]} className={styles.workflowUserProfileImage} />\r\n\t\t\t\t\t\t\t<p className={styles.workflowUserEmail}>{profileImageInfo[0]}</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{error}\r\n\t\t\t\t<div className={styles.shareBtn} onClick={shareWorkflow}>\r\n\t\t\t\t\tDone\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tonClick={toggleModal}\r\n\t\t\t\tclassName={classnames({ [styles.backdropNotVisible]: true, [styles.backdropVisible]: modalVisible })}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.shareBtn} onClick={() => toggleModal()}>\r\n\t\t\t\t<FontAwesomeIcon icon=\"users\" className={styles.shareIcon} />\r\n\t\t\t\t<p>Share</p>\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Share;\r\n"]},"metadata":{},"sourceType":"module"}