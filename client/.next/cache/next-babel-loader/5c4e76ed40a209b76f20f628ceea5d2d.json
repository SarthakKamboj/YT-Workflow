{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\workflow\\\\[id].js\";\nvar __jsx = React.createElement;\nimport { useSelector } from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport DashboardMenu from '../../components/DashboardMenu';\nimport styles from '../../styles/scss/worklow_editor.module.scss';\nimport classnames from 'classnames';\nimport { parseCookie } from '../../components/parseCookie';\nimport WorkflowDescription from '../../components/WorkflowDescription';\nimport AddFile from '../../components/addFile';\nimport Share from '../../components/Share';\nimport WorkflowTitle from '../../components/WorkflowTitle';\nimport WorkflowStarredAndFinished from '../../components/WorkflowStarredAndFinished';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport WorkflowDeleteBtn from '../../components/WorkflowDeleteBtn';\n\nconst Workflow = props => {\n  const jwtToken = useSelector(state => state.jwtToken);\n  const {\n    0: audioUrls,\n    1: setAudioUrls\n  } = useState([]);\n  const {\n    0: imageUrls,\n    1: setImageUrls\n  } = useState([]);\n  const {\n    0: thumbnailUrls,\n    1: setThumbnailUrls\n  } = useState([]);\n  const {\n    0: videoUrls,\n    1: setVideoUrls\n  } = useState([]);\n  const {\n    0: description,\n    1: setDescription\n  } = useState(null);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(null);\n  const {\n    0: starred,\n    1: setStarred\n  } = useState(null);\n  const {\n    0: finished,\n    1: setFinished\n  } = useState(null);\n  const {\n    0: fetched,\n    1: setFetched\n  } = useState(false);\n  const id = props.id;\n  const {\n    0: creator,\n    1: setCreator\n  } = useState('');\n  const {\n    0: otherUsers,\n    1: setOtherUsers\n  } = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const workflowInfoRes = await fetch(`http://127.0.0.1:8000/get-workflow/${id}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${jwtToken}`\n        }\n      });\n      const workflowInfoJson = await workflowInfoRes.json();\n      const workflowInfo = workflowInfoJson['workflow'];\n      setDescription(workflowInfo.description);\n      setTitle(workflowInfo.title);\n      setStarred(workflowInfo.starred);\n      setFinished(workflowInfo.finished);\n      setOtherUsers(workflowInfo['other_users']);\n      setCreator(workflowInfoJson.creator);\n      const workflowFilesRes = await fetch(`http://127.0.0.1:8000/get-workflow-files/${id}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${jwtToken}`\n        }\n      });\n      const filesJson = await workflowFilesRes.json();\n      const fileUrlsJson = filesJson['workflow-file-urls'];\n      setAudioUrls(fileUrlsJson['audio']);\n      setImageUrls(fileUrlsJson['image']);\n      setVideoUrls(fileUrlsJson['video']);\n      setThumbnailUrls(fileUrlsJson['thumbnail']);\n      setFetched(true);\n    }\n\n    fetchData();\n  }, []);\n\n  const updateFileCollections = async fileType => {\n    const res = await fetch(`http://localhost:8000/get-workflow-files/${id}/${fileType}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + jwtToken\n      }\n    });\n    const resJson = await res.json();\n    const urls = resJson['workflow-specific-urls'];\n\n    switch (fileType) {\n      case 'image':\n        setImageUrls(urls);\n        break;\n\n      case 'video':\n        setVideoUrls(urls);\n        break;\n\n      case 'thumbnail':\n        setThumbnailUrls(urls);\n        break;\n\n      case 'audio':\n        setAudioUrls(urls);\n        break;\n    }\n  };\n\n  const deleteFile = async (url, fileType) => {\n    if (confirm('Are you sure you want to delete this file?')) {\n      const fileParts = url.split('/');\n      const fileName = fileParts[fileParts.length - 1];\n      await fetch(`http://localhost:8000/delete-file/${id}/${fileType}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + jwtToken\n        },\n        body: JSON.stringify({\n          file_name: fileName\n        })\n      });\n      await updateFileCollections(fileType);\n    }\n  };\n\n  const pageInfo = () => {\n    if (!fetched) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, \"Fetching\");\n    } else {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 5\n        }\n      }, __jsx(\"section\", {\n        className: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: styles.workflowHeaderInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }\n      }, __jsx(WorkflowTitle, {\n        oldTitle: title,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 8\n        }\n      }), __jsx(WorkflowStarredAndFinished, {\n        oldStarred: starred,\n        oldFinished: finished,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 8\n        }\n      })), __jsx(Share, {\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      })), __jsx(\"section\", {\n        className: styles.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: styles.images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 8\n        }\n      }, \"Thumbnails\"), __jsx(\"div\", {\n        className: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 8\n        }\n      }, thumbnailUrls.map(thumbnailUrl => {\n        return __jsx(\"div\", {\n          className: styles.fileContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }\n        }, __jsx(\"img\", {\n          src: thumbnailUrl,\n          className: styles.workflowImage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 12\n          }\n        }), __jsx(FontAwesomeIcon, {\n          icon: \"trash\",\n          className: styles.deleteIcon,\n          onClick: () => deleteFile(thumbnailUrl, 'thumbnail'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 12\n          }\n        }));\n      }), __jsx(AddFile, {\n        fileType: 'thumbnail',\n        id: id,\n        updateFileCollections: updateFileCollections,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }\n      }))), __jsx(\"div\", {\n        className: styles.images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 8\n        }\n      }, \"Images\"), __jsx(\"div\", {\n        className: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 8\n        }\n      }, imageUrls.map(imageUrl => {\n        return __jsx(\"div\", {\n          className: styles.fileContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 11\n          }\n        }, __jsx(\"img\", {\n          src: imageUrl,\n          className: styles.workflowImage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 12\n          }\n        }), __jsx(FontAwesomeIcon, {\n          icon: \"trash\",\n          className: styles.deleteIcon,\n          onClick: () => deleteFile(imageUrl, 'image'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 12\n          }\n        }));\n      }), __jsx(AddFile, {\n        fileType: 'image',\n        id: id,\n        updateFileCollections: updateFileCollections,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }))), __jsx(\"div\", {\n        className: styles.audios,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 8\n        }\n      }, \"Audio\"), __jsx(\"div\", {\n        className: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 8\n        }\n      }, audioUrls.map(audioUrl => {\n        const dotParts = audioUrl.split('.');\n        const mimeType = dotParts[dotParts.length - 1];\n        return __jsx(\"div\", {\n          className: classnames({\n            [styles.fileContainer]: true,\n            [styles.audioFileContainer]: true\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 11\n          }\n        }, __jsx(\"audio\", {\n          key: audioUrl,\n          controls: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 12\n          }\n        }, __jsx(\"source\", {\n          src: audioUrl,\n          type: `audio/${mimeType}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }\n        }), \";\"), __jsx(FontAwesomeIcon, {\n          icon: \"trash\",\n          className: styles.deleteIcon,\n          onClick: () => deleteFile(audioUrl, 'audio'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 12\n          }\n        }));\n      }), __jsx(AddFile, {\n        fileType: 'audio',\n        id: id,\n        updateFileCollections: updateFileCollections,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }\n      }))), __jsx(\"div\", {\n        className: styles.videos,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 8\n        }\n      }, \"Videos\"), __jsx(\"div\", {\n        className: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 8\n        }\n      }, videoUrls.map(videoUrl => {\n        const dotParts = videoUrl.split('.');\n        const mimeType = dotParts[dotParts.length - 1];\n\n        if (mimeType !== 'mov') {\n          return __jsx(\"div\", {\n            className: styles.fileContainer,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 12\n            }\n          }, __jsx(\"video\", {\n            key: videoUrl,\n            className: styles.workflowVideo,\n            width: \"320\",\n            height: \"240\",\n            controls: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 13\n            }\n          }, __jsx(\"source\", {\n            src: videoUrl,\n            type: `video/${mimeType}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 14\n            }\n          })), __jsx(FontAwesomeIcon, {\n            icon: \"trash\",\n            className: styles.deleteIcon,\n            onClick: () => deleteFile(videoUrl, 'video'),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 13\n            }\n          }));\n        } else {\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 18\n            }\n          });\n        }\n      }), __jsx(AddFile, {\n        fileType: 'video',\n        id: id,\n        updateFileCollections: updateFileCollections,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }))), __jsx(WorkflowDescription, {\n        oldDescription: description,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 7\n        }\n      }), __jsx(WorkflowDeleteBtn, {\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 7\n        }\n      })));\n    }\n  }; // console.log('hi');\n\n\n  return __jsx(\"main\", {\n    className: styles.workflowEditorContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.dashboardMenuContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 4\n    }\n  }, __jsx(DashboardMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    className: styles.editor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 4\n    }\n  }, pageInfo()));\n};\n\nexport async function getServerSideProps({\n  params\n}) {\n  // console.log(params.id);\n  return {\n    props: {\n      id: params.id\n    }\n  };\n}\nexport async function getServerSidePaths({\n  req\n}) {\n  const cookies = parseCookie(req);\n  const origWorkflowsRes = await fetch('http://127.0.0.1:8000/get-workflow-ids', {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: cookies.jwt\n    }\n  });\n  const origWorkflowsJson = origWorkflowsRes.json();\n  const workflowIds = origWorkflowsJson['workflow-ids'];\n  const paths = workflowIds.map(workflowId => {\n    return {\n      params: {\n        id: workflowId.toString()\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Workflow;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/workflow/[id].js"],"names":["useSelector","React","useState","useEffect","DashboardMenu","styles","classnames","parseCookie","WorkflowDescription","AddFile","Share","WorkflowTitle","WorkflowStarredAndFinished","FontAwesomeIcon","WorkflowDeleteBtn","Workflow","props","jwtToken","state","audioUrls","setAudioUrls","imageUrls","setImageUrls","thumbnailUrls","setThumbnailUrls","videoUrls","setVideoUrls","description","setDescription","title","setTitle","starred","setStarred","finished","setFinished","fetched","setFetched","id","creator","setCreator","otherUsers","setOtherUsers","fetchData","workflowInfoRes","fetch","headers","Authorization","workflowInfoJson","json","workflowInfo","workflowFilesRes","filesJson","fileUrlsJson","updateFileCollections","fileType","res","resJson","urls","deleteFile","url","confirm","fileParts","split","fileName","length","method","body","JSON","stringify","file_name","pageInfo","header","workflowHeaderInfo","content","images","container","map","thumbnailUrl","fileContainer","workflowImage","deleteIcon","imageUrl","audios","audioUrl","dotParts","mimeType","audioFileContainer","videos","videoUrl","workflowVideo","workflowEditorContainer","dashboardMenuContainer","editor","getServerSideProps","params","getServerSidePaths","req","cookies","origWorkflowsRes","jwt","origWorkflowsJson","workflowIds","paths","workflowId","toString","fallback"],"mappings":"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","sourcesContent":["import { useSelector } from 'react-redux';\r\nimport React, { useState, useEffect } from 'react';\r\nimport DashboardMenu from '../../components/DashboardMenu';\r\nimport styles from '../../styles/scss/worklow_editor.module.scss';\r\nimport classnames from 'classnames';\r\nimport { parseCookie } from '../../components/parseCookie';\r\nimport WorkflowDescription from '../../components/WorkflowDescription';\r\nimport AddFile from '../../components/addFile';\r\nimport Share from '../../components/Share';\r\nimport WorkflowTitle from '../../components/WorkflowTitle';\r\nimport WorkflowStarredAndFinished from '../../components/WorkflowStarredAndFinished';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport WorkflowDeleteBtn from '../../components/WorkflowDeleteBtn';\r\n\r\nconst Workflow = (props) => {\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\r\n\tconst [ audioUrls, setAudioUrls ] = useState([]);\r\n\tconst [ imageUrls, setImageUrls ] = useState([]);\r\n\tconst [ thumbnailUrls, setThumbnailUrls ] = useState([]);\r\n\tconst [ videoUrls, setVideoUrls ] = useState([]);\r\n\tconst [ description, setDescription ] = useState(null);\r\n\tconst [ title, setTitle ] = useState(null);\r\n\tconst [ starred, setStarred ] = useState(null);\r\n\tconst [ finished, setFinished ] = useState(null);\r\n\tconst [ fetched, setFetched ] = useState(false);\r\n\tconst id = props.id;\r\n\tconst [ creator, setCreator ] = useState('');\r\n\tconst [ otherUsers, setOtherUsers ] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData() {\r\n\t\t\tconst workflowInfoRes = await fetch(`http://127.0.0.1:8000/get-workflow/${id}`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${jwtToken}`\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconst workflowInfoJson = await workflowInfoRes.json();\r\n\t\t\tconst workflowInfo = workflowInfoJson['workflow'];\r\n\t\t\tsetDescription(workflowInfo.description);\r\n\t\t\tsetTitle(workflowInfo.title);\r\n\t\t\tsetStarred(workflowInfo.starred);\r\n\t\t\tsetFinished(workflowInfo.finished);\r\n\t\t\tsetOtherUsers(workflowInfo['other_users']);\r\n\t\t\tsetCreator(workflowInfoJson.creator);\r\n\t\t\tconst workflowFilesRes = await fetch(`http://127.0.0.1:8000/get-workflow-files/${id}`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${jwtToken}`\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconst filesJson = await workflowFilesRes.json();\r\n\t\t\tconst fileUrlsJson = filesJson['workflow-file-urls'];\r\n\t\t\tsetAudioUrls(fileUrlsJson['audio']);\r\n\t\t\tsetImageUrls(fileUrlsJson['image']);\r\n\t\t\tsetVideoUrls(fileUrlsJson['video']);\r\n\t\t\tsetThumbnailUrls(fileUrlsJson['thumbnail']);\r\n\t\t\tsetFetched(true);\r\n\t\t}\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\tconst updateFileCollections = async (fileType) => {\r\n\t\tconst res = await fetch(`http://localhost:8000/get-workflow-files/${id}/${fileType}`, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst resJson = await res.json();\r\n\t\tconst urls = resJson['workflow-specific-urls'];\r\n\t\tswitch (fileType) {\r\n\t\t\tcase 'image':\r\n\t\t\t\tsetImageUrls(urls);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'video':\r\n\t\t\t\tsetVideoUrls(urls);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'thumbnail':\r\n\t\t\t\tsetThumbnailUrls(urls);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'audio':\r\n\t\t\t\tsetAudioUrls(urls);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tconst deleteFile = async (url, fileType) => {\r\n\t\tif (confirm('Are you sure you want to delete this file?')) {\r\n\t\t\tconst fileParts = url.split('/');\r\n\t\t\tconst fileName = fileParts[fileParts.length - 1];\r\n\t\t\tawait fetch(`http://localhost:8000/delete-file/${id}/${fileType}`, {\r\n\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tfile_name: fileName\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tawait updateFileCollections(fileType);\r\n\t\t}\r\n\t};\r\n\r\n\tconst pageInfo = () => {\r\n\t\tif (!fetched) {\r\n\t\t\treturn <div>Fetching</div>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<section className={styles.header}>\r\n\t\t\t\t\t\t<div className={styles.workflowHeaderInfo}>\r\n\t\t\t\t\t\t\t<WorkflowTitle oldTitle={title} id={id} />\r\n\t\t\t\t\t\t\t<WorkflowStarredAndFinished oldStarred={starred} oldFinished={finished} id={id} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<Share id={id} />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<section className={styles.content}>\r\n\t\t\t\t\t\t<div className={styles.images}>\r\n\t\t\t\t\t\t\t<h2>Thumbnails</h2>\r\n\t\t\t\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t\t\t\t{thumbnailUrls.map((thumbnailUrl) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div className={styles.fileContainer}>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={thumbnailUrl} className={styles.workflowImage} />\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\t\t\t\ticon=\"trash\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.deleteIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteFile(thumbnailUrl, 'thumbnail')}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t<AddFile fileType={'thumbnail'} id={id} updateFileCollections={updateFileCollections} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className={styles.images}>\r\n\t\t\t\t\t\t\t<h2>Images</h2>\r\n\t\t\t\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t\t\t\t{imageUrls.map((imageUrl) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div className={styles.fileContainer}>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={imageUrl} className={styles.workflowImage} />\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\t\t\t\ticon=\"trash\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.deleteIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteFile(imageUrl, 'image')}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t<AddFile fileType={'image'} id={id} updateFileCollections={updateFileCollections} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.audios}>\r\n\t\t\t\t\t\t\t<h2>Audio</h2>\r\n\t\t\t\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t\t\t\t{audioUrls.map((audioUrl) => {\r\n\t\t\t\t\t\t\t\t\tconst dotParts = audioUrl.split('.');\r\n\t\t\t\t\t\t\t\t\tconst mimeType = dotParts[dotParts.length - 1];\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t\t\t\t\t\t\t\t[styles.fileContainer]: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t[styles.audioFileContainer]: true\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<audio key={audioUrl} controls>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<source src={audioUrl} type={`audio/${mimeType}`} />;\r\n\t\t\t\t\t\t\t\t\t\t\t</audio>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\t\t\t\ticon=\"trash\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.deleteIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteFile(audioUrl, 'audio')}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t<AddFile fileType={'audio'} id={id} updateFileCollections={updateFileCollections} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.videos}>\r\n\t\t\t\t\t\t\t<h2>Videos</h2>\r\n\t\t\t\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t\t\t\t{videoUrls.map((videoUrl) => {\r\n\t\t\t\t\t\t\t\t\tconst dotParts = videoUrl.split('.');\r\n\t\t\t\t\t\t\t\t\tconst mimeType = dotParts[dotParts.length - 1];\r\n\t\t\t\t\t\t\t\t\tif (mimeType !== 'mov') {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<div className={styles.fileContainer}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<video\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={videoUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.workflowVideo}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"320\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"240\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<source src={videoUrl} type={`video/${mimeType}`} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</video>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ticon=\"trash\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.deleteIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteFile(videoUrl, 'video')}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\treturn <React.Fragment />;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t<AddFile fileType={'video'} id={id} updateFileCollections={updateFileCollections} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<WorkflowDescription oldDescription={description} id={id} />\r\n\t\t\t\t\t\t<WorkflowDeleteBtn id={id} />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t// console.log('hi');\r\n\treturn (\r\n\t\t<main className={styles.workflowEditorContainer}>\r\n\t\t\t<div className={styles.dashboardMenuContainer}>\r\n\t\t\t\t<DashboardMenu />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.editor}>{pageInfo()}</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport async function getServerSideProps({ params }) {\r\n\t// console.log(params.id);\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tid: params.id\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport async function getServerSidePaths({ req }) {\r\n\tconst cookies = parseCookie(req);\r\n\tconst origWorkflowsRes = await fetch('http://127.0.0.1:8000/get-workflow-ids', {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: cookies.jwt\r\n\t\t}\r\n\t});\r\n\tconst origWorkflowsJson = origWorkflowsRes.json();\r\n\tconst workflowIds = origWorkflowsJson['workflow-ids'];\r\n\r\n\tconst paths = workflowIds.map((workflowId) => {\r\n\t\treturn {\r\n\t\t\tparams: {\r\n\t\t\t\tid: workflowId.toString()\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\treturn {\r\n\t\tpaths,\r\n\t\tfallback: false\r\n\t};\r\n}\r\n\r\nexport default Workflow;\r\n"]},"metadata":{},"sourceType":"module"}