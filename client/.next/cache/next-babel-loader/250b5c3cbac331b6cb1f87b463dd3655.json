{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\login.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/scss/sign-in.module.scss';\nimport classnames from 'classnames';\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Router from 'next/router';\nimport { setJwt } from '../components/actions/jwtAction';\nimport { useDispatch } from 'react-redux';\nimport Cookie from 'js-cookie';\n\nconst Joi = require('@hapi/joi');\n\nconst Login = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: viewPassword,\n    1: setViewPassword\n  } = useState(false);\n  const {\n    0: emailInputEmpty,\n    1: setEmailInputEmpty\n  } = useState(true);\n  const {\n    0: passwordInputEmpty,\n    1: setPasswordInputEmpty\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const minPasswordLength = 2;\n  const signUpSchema = Joi.object({\n    email: Joi.string().required().email({\n      minDomainSegments: 2,\n      tlds: {\n        allow: ['com', 'net']\n      }\n    }),\n    password: Joi.string().required().min(minPasswordLength)\n  });\n\n  const updateEmail = input => {\n    setEmail(input);\n    if (input === '') setEmailInputEmpty(true);else setEmailInputEmpty(false);\n  };\n\n  const updatePassword = input => {\n    setPassword(input);\n    if (input === '') setPasswordInputEmpty(true);else setPasswordInputEmpty(false);\n  };\n\n  const checkIfEncodeUriValid = input => {\n    return encodeURI(input) === input;\n  };\n\n  const toCapitalize = input => {\n    return input.slice(0, 1).toUpperCase() + input.slice(1);\n  };\n\n  const loginInformation = async () => {\n    console.log('all logged in');\n    const emailUriEncoded = checkIfEncodeUriValid(email);\n    const passwordUriEncoded = checkIfEncodeUriValid(password);\n    const signUpValidation = signUpSchema.validate({\n      email,\n      password\n    });\n\n    if (signUpValidation.error) {\n      const empty = signUpValidation.error.toString().includes('empty');\n      const valid = signUpValidation.error.toString().includes('valid');\n      const tooShort = signUpValidation.error.toString().includes('at least');\n      const errorField = signUpValidation.error.toString().split('\"')[1];\n\n      if (empty) {\n        return setError(toCapitalize(errorField) + ' cannot be empty');\n      } else if (valid) {\n        return setError(toCapitalize(errorField) + ' must be valid');\n      } else if (errorField === 'password' && tooShort) {\n        return setError(toCapitalize(errorField) + ` must be at least ${minPasswordLength} characters long.`);\n      }\n    }\n\n    if (!emailUriEncoded || !passwordUriEncoded) {\n      return setError('Login information can only have letters and numbers!');\n    } // console.log(username, email, password);\n\n\n    const data = {\n      email,\n      password\n    };\n    const dataString = JSON.stringify(data);\n\n    try {\n      const logInRequest = await fetch(process.env.LOGIN_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: dataString\n      });\n      const loginJson = await logInRequest.json();\n\n      if (loginJson.msg === 'Account login was unsuccessful. Please try again.') {\n        setError(loginJson.msg);\n        return;\n      }\n\n      console.log(loginJson);\n      setError('');\n      const accessJwtToken = loginJson.access;\n      const refreshJwtToken = loginJson.refresh;\n      localStorage.setItem('refresh-token', refreshJwtToken);\n      console.log(setJwt(accessJwtToken));\n      dispatch(setJwt(accessJwtToken));\n      localStorage.setItem('jwt', accessJwtToken);\n      Cookie.set('jwt', JSON.stringify(accessJwtToken));\n      Cookie.set('refresh-token', JSON.stringify(refreshJwtToken)); // setJwtInJS(accessJwtToken);\n      // fs.writeFile('jwt.txt', accessJwtToken, function(err) {\n      // \tif (err) return console.log(err);\n      // \t//   console.log('Hello World > helloworld.txt');\n      // });\n\n      return Router.push('/dashboard/workflows');\n    } catch (error) {\n      console.log(error);\n    }\n\n    return; // \tconst data = { email: email, password: password };\n    // \tconst dataString = JSON.stringify(data);\n    // \tconst signInRequest = await fetch(process.env.LOGIN_URL, {\n    // \t\tmethod: 'POST',\n    // \t\theaders: {\n    // \t\t\t'Content-Type': 'application/json',\n    // \t\t\tAccept: 'application/json'\n    // \t\t},\n    // \t\tbody: dataString\n    // \t});\n    // \tconst signInJson = await signInRequest.json();\n    // \tif (signInJson.error) {\n    // \t\treturn setError(signInJson.error);\n    // \t}\n    // \tsetError('');\n    // \tlocalStorage.setItem('jwt', signInJson.token);\n    // \treturn router.push('/');\n  };\n\n  const toggleViewPassword = () => {\n    setViewPassword(!viewPassword);\n  };\n\n  return __jsx(\"main\", {\n    className: styles.loginContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.images,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }\n  }, __jsx(\"img\", {\n    src: \"/images/cartoon-youtube.png\",\n    alt: \"Youtube Workflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    className: styles.loginTxt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }\n  }, __jsx(\"img\", {\n    className: styles.logoImg,\n    src: \"/images/logo.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, \"Welcome Back!\"), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, \"To keep putting out more of your amazing videos, please login in with your email address and password below.\"), __jsx(\"div\", {\n    className: styles.signInSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.emailSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 6\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 8\n    }\n  }, __jsx(\"h4\", {\n    className: classnames({\n      [styles.label]: true,\n      [styles.labelHover]: !emailInputEmpty\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"Email\"), __jsx(\"input\", {\n    className: classnames({\n      [styles.errorInput]: error.includes('Email')\n    }),\n    value: email,\n    onChange: e => updateEmail(e.target.value),\n    type: \"email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 8\n    }\n  }, __jsx(\"h4\", {\n    className: classnames({\n      [styles.label]: true,\n      [styles.labelHover]: !passwordInputEmpty\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, \"Password\"), __jsx(\"input\", {\n    className: classnames({\n      [styles.errorInput]: error.includes('Password')\n    }),\n    value: password,\n    onChange: e => updatePassword(e.target.value),\n    type: viewPassword ? 'text' : 'password',\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }), __jsx(\"img\", {\n    src: \"/images/eye.png\",\n    onClick: () => toggleViewPassword(),\n    alt: \"Toggle Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  })), __jsx(\"span\", {\n    className: styles.loginError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 8\n    }\n  }, error), __jsx(\"div\", {\n    className: styles.submitEmailForm,\n    onClick: () => loginInformation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 8\n    }\n  }, \"Sign In\"))), __jsx(\"h3\", {\n    className: styles.switchToSignUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 6\n    }\n  }, \"Don't have an account?\", '  ', __jsx(Link, {\n    href: \"/signUp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: styles.signUpBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 8\n    }\n  }, \"Sign Up\"))), __jsx(\"div\", {\n    className: styles.copyright,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 6\n    }\n  }, \"\\xA9 2020. All Rights Reserved. Workflow.\"))));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/login.js"],"names":["styles","classnames","useState","Link","useRouter","Router","setJwt","useDispatch","Cookie","Joi","require","Login","router","dispatch","email","setEmail","password","setPassword","viewPassword","setViewPassword","emailInputEmpty","setEmailInputEmpty","passwordInputEmpty","setPasswordInputEmpty","error","setError","minPasswordLength","signUpSchema","object","string","required","minDomainSegments","tlds","allow","min","updateEmail","input","updatePassword","checkIfEncodeUriValid","encodeURI","toCapitalize","slice","toUpperCase","loginInformation","console","log","emailUriEncoded","passwordUriEncoded","signUpValidation","validate","empty","toString","includes","valid","tooShort","errorField","split","data","dataString","JSON","stringify","logInRequest","fetch","process","env","LOGIN_URL","method","headers","body","loginJson","json","msg","accessJwtToken","access","refreshJwtToken","refresh","localStorage","setItem","set","push","toggleViewPassword","loginContainer","images","loginTxt","logoImg","signInSection","emailSignIn","label","labelHover","errorInput","e","target","value","loginError","submitEmailForm","switchToSignUp","signUpBtn","copyright"],"mappings":"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","sourcesContent":["import styles from '../styles/scss/sign-in.module.scss';\r\nimport classnames from 'classnames';\r\nimport { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { useRouter } from 'next/router';\r\nimport Router from 'next/router';\r\nimport { setJwt } from '../components/actions/jwtAction';\r\nimport { useDispatch } from 'react-redux';\r\nimport Cookie from 'js-cookie';\r\nconst Joi = require('@hapi/joi');\r\n\r\nconst Login = () => {\r\n\tconst router = useRouter();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst [ email, setEmail ] = useState('');\r\n\tconst [ password, setPassword ] = useState('');\r\n\tconst [ viewPassword, setViewPassword ] = useState(false);\r\n\tconst [ emailInputEmpty, setEmailInputEmpty ] = useState(true);\r\n\tconst [ passwordInputEmpty, setPasswordInputEmpty ] = useState(true);\r\n\tconst [ error, setError ] = useState('');\r\n\r\n\tconst minPasswordLength = 2;\r\n\r\n\tconst signUpSchema = Joi.object({\r\n\t\temail: Joi.string().required().email({ minDomainSegments: 2, tlds: { allow: [ 'com', 'net' ] } }),\r\n\t\tpassword: Joi.string().required().min(minPasswordLength)\r\n\t});\r\n\r\n\tconst updateEmail = (input) => {\r\n\t\tsetEmail(input);\r\n\t\tif (input === '') setEmailInputEmpty(true);\r\n\t\telse setEmailInputEmpty(false);\r\n\t};\r\n\r\n\tconst updatePassword = (input) => {\r\n\t\tsetPassword(input);\r\n\t\tif (input === '') setPasswordInputEmpty(true);\r\n\t\telse setPasswordInputEmpty(false);\r\n\t};\r\n\r\n\tconst checkIfEncodeUriValid = (input) => {\r\n\t\treturn encodeURI(input) === input;\r\n\t};\r\n\r\n\tconst toCapitalize = (input) => {\r\n\t\treturn input.slice(0, 1).toUpperCase() + input.slice(1);\r\n\t};\r\n\r\n\tconst loginInformation = async () => {\r\n\t\tconsole.log('all logged in');\r\n\t\tconst emailUriEncoded = checkIfEncodeUriValid(email);\r\n\t\tconst passwordUriEncoded = checkIfEncodeUriValid(password);\r\n\r\n\t\tconst signUpValidation = signUpSchema.validate({ email, password });\r\n\r\n\t\tif (signUpValidation.error) {\r\n\t\t\tconst empty = signUpValidation.error.toString().includes('empty');\r\n\t\t\tconst valid = signUpValidation.error.toString().includes('valid');\r\n\t\t\tconst tooShort = signUpValidation.error.toString().includes('at least');\r\n\t\t\tconst errorField = signUpValidation.error.toString().split('\"')[1];\r\n\t\t\tif (empty) {\r\n\t\t\t\treturn setError(toCapitalize(errorField) + ' cannot be empty');\r\n\t\t\t} else if (valid) {\r\n\t\t\t\treturn setError(toCapitalize(errorField) + ' must be valid');\r\n\t\t\t} else if (errorField === 'password' && tooShort) {\r\n\t\t\t\treturn setError(toCapitalize(errorField) + ` must be at least ${minPasswordLength} characters long.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!emailUriEncoded || !passwordUriEncoded) {\r\n\t\t\treturn setError('Login information can only have letters and numbers!');\r\n\t\t}\r\n\r\n\t\t// console.log(username, email, password);\r\n\t\tconst data = { email, password };\r\n\t\tconst dataString = JSON.stringify(data);\r\n\t\ttry {\r\n\t\t\tconst logInRequest = await fetch(process.env.LOGIN_URL, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: dataString\r\n\t\t\t});\r\n\t\t\tconst loginJson = await logInRequest.json();\r\n\r\n\t\t\tif (loginJson.msg === 'Account login was unsuccessful. Please try again.') {\r\n\t\t\t\tsetError(loginJson.msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconsole.log(loginJson);\r\n\t\t\tsetError('');\r\n\t\t\tconst accessJwtToken = loginJson.access;\r\n\t\t\tconst refreshJwtToken = loginJson.refresh;\r\n\t\t\tlocalStorage.setItem('refresh-token', refreshJwtToken);\r\n\t\t\tconsole.log(setJwt(accessJwtToken));\r\n\t\t\tdispatch(setJwt(accessJwtToken));\r\n\t\t\tlocalStorage.setItem('jwt', accessJwtToken);\r\n\t\t\tCookie.set('jwt', JSON.stringify(accessJwtToken));\r\n\t\t\tCookie.set('refresh-token', JSON.stringify(refreshJwtToken));\r\n\t\t\t// setJwtInJS(accessJwtToken);\r\n\t\t\t// fs.writeFile('jwt.txt', accessJwtToken, function(err) {\r\n\t\t\t// \tif (err) return console.log(err);\r\n\t\t\t// \t//   console.log('Hello World > helloworld.txt');\r\n\t\t\t// });\r\n\t\t\treturn Router.push('/dashboard/workflows');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t\treturn;\r\n\t\t// \tconst data = { email: email, password: password };\r\n\t\t// \tconst dataString = JSON.stringify(data);\r\n\t\t// \tconst signInRequest = await fetch(process.env.LOGIN_URL, {\r\n\t\t// \t\tmethod: 'POST',\r\n\t\t// \t\theaders: {\r\n\t\t// \t\t\t'Content-Type': 'application/json',\r\n\t\t// \t\t\tAccept: 'application/json'\r\n\t\t// \t\t},\r\n\t\t// \t\tbody: dataString\r\n\t\t// \t});\r\n\t\t// \tconst signInJson = await signInRequest.json();\r\n\r\n\t\t// \tif (signInJson.error) {\r\n\t\t// \t\treturn setError(signInJson.error);\r\n\t\t// \t}\r\n\t\t// \tsetError('');\r\n\t\t// \tlocalStorage.setItem('jwt', signInJson.token);\r\n\t\t// \treturn router.push('/');\r\n\t};\r\n\r\n\tconst toggleViewPassword = () => {\r\n\t\tsetViewPassword(!viewPassword);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<main className={styles.loginContainer}>\r\n\t\t\t<div className={styles.images}>\r\n\t\t\t\t<img src=\"/images/cartoon-youtube.png\" alt=\"Youtube Workflow\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.loginTxt}>\r\n\t\t\t\t<img className={styles.logoImg} src=\"/images/logo.jpg\" />\r\n\t\t\t\t<h1>Welcome Back!</h1>\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tTo keep putting out more of your amazing videos, please login in with your email address and\r\n\t\t\t\t\tpassword below.\r\n\t\t\t\t</h5>\r\n\t\t\t\t<div className={styles.signInSection}>\r\n\t\t\t\t\t{/* <div className={styles.googleSignIn}>\r\n\t\t\t\t\t\t<img src=\"/images/google_logo.png\" />\r\n\t\t\t\t\t\t<h4>Sign In with Google</h4>\r\n\t\t\t\t\t</div> */}\r\n\t\t\t\t\t<div className={styles.emailSignIn}>\r\n\t\t\t\t\t\t{/* <p>Or sign-in with email</p> */}\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h4\r\n\t\t\t\t\t\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t\t\t\t\t\t[styles.label]: true,\r\n\t\t\t\t\t\t\t\t\t\t[styles.labelHover]: !emailInputEmpty\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tEmail\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tclassName={classnames({ [styles.errorInput]: error.includes('Email') })}\r\n\t\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => updateEmail(e.target.value)}\r\n\t\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h4\r\n\t\t\t\t\t\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t\t\t\t\t\t[styles.label]: true,\r\n\t\t\t\t\t\t\t\t\t\t[styles.labelHover]: !passwordInputEmpty\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tPassword\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tclassName={classnames({ [styles.errorInput]: error.includes('Password') })}\r\n\t\t\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => updatePassword(e.target.value)}\r\n\t\t\t\t\t\t\t\t\ttype={viewPassword ? 'text' : 'password'}\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<img src=\"/images/eye.png\" onClick={() => toggleViewPassword()} alt=\"Toggle Password\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<span className={styles.loginError}>{error}</span>\r\n\t\t\t\t\t\t\t<div className={styles.submitEmailForm} onClick={() => loginInformation()}>\r\n\t\t\t\t\t\t\t\tSign In\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h3 className={styles.switchToSignUp}>\r\n\t\t\t\t\t\tDon't have an account?{'  '}\r\n\t\t\t\t\t\t<Link href=\"/signUp\">\r\n\t\t\t\t\t\t\t<span className={styles.signUpBtn}>Sign Up</span>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<div className={styles.copyright}>&copy; 2020. All Rights Reserved. Workflow.</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}