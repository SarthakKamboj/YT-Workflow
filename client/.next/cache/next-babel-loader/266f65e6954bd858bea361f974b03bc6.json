{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\workflow\\\\[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch } from 'react-redux'; // const dispatch = useDispatch();\n\nvar string = 'string';\n\nvar Workflow = function Workflow(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, \"Workflow \", props.id);\n}; // export async function getStaticProps({ params }) {\n// \treturn {\n// \t\tid: params.id\n// \t};\n// }\n// export async function getStaticPaths() {\n// \t// const workflowIds = localStorage.getItem('workflowIds');\n// \t// const jwt = localStorage.getItem('jwt');\n// \tconsole.log(string);\n// \t// const workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\n// \t// \theaders: {\n// \t// \t\t'Content-Type': 'application/json',\n// \t// \t\tAuthorization: `Bearer ${jwt}`\n// \t// \t}\n// \t// });\n// \t// const workflowIdsJson = await workflowIdsResponse.json();\n// \t// const workflowIdsArray = await workflowIdsJson['workflow-ids'];\n// \t// const paths = workflowIdsArray.map((workflowId) => {\n// \t// \treturn {\n// \t// \t\tparams: {\n// \t// \t\t\tid: workflowId\n// \t// \t\t}\n// \t// \t};\n// \t// });\n// \t// return {\n// \t// \tpaths,\n// \t// \tfallback: false\n// \t// };\n// \treturn {\n// \t\tpaths: [\n// \t\t\t(params: {\n// \t\t\t\tid: 8\n// \t\t\t})\n// \t\t],\n// \t\tfallback: false\n// \t};\n// }\n\n\n_c = Workflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workflow\");","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/workflow/[id].js"],"names":["useDispatch","string","Workflow","props","id"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CAEA;;AAEA,IAAMC,MAAM,GAAG,QAAf;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC3B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeA,KAAK,CAACC,EAArB,CAAP;AACA,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzCMF,Q","sourcesContent":["import { useDispatch } from 'react-redux';\r\n\r\n// const dispatch = useDispatch();\r\n\r\nconst string = 'string';\r\n\r\nconst Workflow = (props) => {\r\n\treturn <div>Workflow {props.id}</div>;\r\n};\r\n\r\n// export async function getStaticProps({ params }) {\r\n// \treturn {\r\n// \t\tid: params.id\r\n// \t};\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n// \t// const workflowIds = localStorage.getItem('workflowIds');\r\n// \t// const jwt = localStorage.getItem('jwt');\r\n// \tconsole.log(string);\r\n// \t// const workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\r\n// \t// \theaders: {\r\n// \t// \t\t'Content-Type': 'application/json',\r\n// \t// \t\tAuthorization: `Bearer ${jwt}`\r\n// \t// \t}\r\n// \t// });\r\n// \t// const workflowIdsJson = await workflowIdsResponse.json();\r\n// \t// const workflowIdsArray = await workflowIdsJson['workflow-ids'];\r\n// \t// const paths = workflowIdsArray.map((workflowId) => {\r\n// \t// \treturn {\r\n// \t// \t\tparams: {\r\n// \t// \t\t\tid: workflowId\r\n// \t// \t\t}\r\n// \t// \t};\r\n// \t// });\r\n// \t// return {\r\n// \t// \tpaths,\r\n// \t// \tfallback: false\r\n// \t// };\r\n// \treturn {\r\n// \t\tpaths: [\r\n// \t\t\t(params: {\r\n// \t\t\t\tid: 8\r\n// \t\t\t})\r\n// \t\t],\r\n// \t\tfallback: false\r\n// \t};\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}