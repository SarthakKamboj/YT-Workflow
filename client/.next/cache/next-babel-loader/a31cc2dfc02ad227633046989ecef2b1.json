{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\workflow\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useDispatch } from 'react-redux';\n// import { jwt } from '../../components/JWT';\nimport Router from 'next/router'; // const dispatch = useDispatch();\n\nconst Workflow = () => {\n  console.log(Router.pathname); // console.log('hi');\n\n  const id = Router.query.id;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, \"Workflow \", id);\n}; // export async function getStaticProps({ params }) {\n// console.log('props');\n// return {\n// \tprops: {\n// \t\tid: params.id\n// \t}\n// };\n// \treturn {\n// \t\tprops: {\n// \t\t\tid: 1\n// \t\t}\n// \t};\n// }\n// export async function getStaticPaths() {\n// \t// const workflowIds = localStorage.getItem('workflowIds');\n// \t// const jwt = localStorage.getItem('jwt');\n// \tconst jwt =\n// \t\t'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTkyMzMyOTI1LCJqdGkiOiIyNzhiMjAyMTQyNTY0MWIxYTc5NjJmNGE4NzI2ZjcwNSIsInVzZXJfaWQiOjQ1fQ.rGAuQaDnBaueRKcE6ZE4t7Ym4Y-HbHqFYn-k-iWr1-0'; // console.log(jwtToken);\n// \tconsole.log(jwt);\n// \tconst workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\n// \t\theaders: {\n// \t\t\t'Content-Type': 'application/json',\n// \t\t\tAuthorization: `Bearer ${jwt}`\n// \t\t}\n// \t});\n// \tconst workflowIdsJson = await workflowIdsResponse.json();\n// \tconsole.log(workflowIdsJson);\n// \tconst workflowIdsArray = await workflowIdsJson['workflow-ids'];\n// \tconsole.log(workflowIdsArray);\n// \tconst paths = workflowIdsArray.map((workflowId) => {\n// \t\treturn {\n// \t\t\tparams: {\n// \t\t\t\tid: workflowId.toString()\n// \t\t\t}\n// \t\t};\n// \t});\n// \tconsole.log(paths);\n// \treturn {\n// \t\tpaths,\n// \t\tfallback: false\n// \t};\n// }\n\n\nexport default Workflow;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/workflow/[id].js"],"names":["Router","Workflow","console","log","pathname","id","query"],"mappings":";;;AAAA;AACA;AACA,OAAOA,MAAP,MAAmB,aAAnB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,QAAnB,EADsB,CAEtB;;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACM,KAAP,CAAaD,EAAxB;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeA,EAAf,CAAP;AACA,CALD,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeJ,QAAf","sourcesContent":["// import { useDispatch } from 'react-redux';\r\n// import { jwt } from '../../components/JWT';\r\nimport Router from 'next/router';\r\n\r\n// const dispatch = useDispatch();\r\n\r\nconst Workflow = () => {\r\n\tconsole.log(Router.pathname);\r\n\t// console.log('hi');\r\n\tconst id = Router.query.id;\r\n\treturn <div>Workflow {id}</div>;\r\n};\r\n\r\n// export async function getStaticProps({ params }) {\r\n// console.log('props');\r\n// return {\r\n// \tprops: {\r\n// \t\tid: params.id\r\n// \t}\r\n// };\r\n// \treturn {\r\n// \t\tprops: {\r\n// \t\t\tid: 1\r\n// \t\t}\r\n// \t};\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n// \t// const workflowIds = localStorage.getItem('workflowIds');\r\n// \t// const jwt = localStorage.getItem('jwt');\r\n// \tconst jwt =\r\n// \t\t'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTkyMzMyOTI1LCJqdGkiOiIyNzhiMjAyMTQyNTY0MWIxYTc5NjJmNGE4NzI2ZjcwNSIsInVzZXJfaWQiOjQ1fQ.rGAuQaDnBaueRKcE6ZE4t7Ym4Y-HbHqFYn-k-iWr1-0'; // console.log(jwtToken);\r\n// \tconsole.log(jwt);\r\n// \tconst workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\r\n// \t\theaders: {\r\n// \t\t\t'Content-Type': 'application/json',\r\n// \t\t\tAuthorization: `Bearer ${jwt}`\r\n// \t\t}\r\n// \t});\r\n// \tconst workflowIdsJson = await workflowIdsResponse.json();\r\n// \tconsole.log(workflowIdsJson);\r\n// \tconst workflowIdsArray = await workflowIdsJson['workflow-ids'];\r\n// \tconsole.log(workflowIdsArray);\r\n// \tconst paths = workflowIdsArray.map((workflowId) => {\r\n// \t\treturn {\r\n// \t\t\tparams: {\r\n// \t\t\t\tid: workflowId.toString()\r\n// \t\t\t}\r\n// \t\t};\r\n// \t});\r\n// \tconsole.log(paths);\r\n// \treturn {\r\n// \t\tpaths,\r\n// \t\tfallback: false\r\n// \t};\r\n// }\r\n\r\nexport default Workflow;\r\n"]},"metadata":{},"sourceType":"module"}