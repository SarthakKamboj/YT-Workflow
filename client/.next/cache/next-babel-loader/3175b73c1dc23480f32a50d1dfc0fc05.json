{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\workflow\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch } from 'react-redux'; // import { jwt } from '../../components/JWT';\n\nimport Router from 'next/router'; // const dispatch = useDispatch();\n\nconst Workflow = () => {\n  console.log(Router.query); // console.log('hi');\n\n  const id = Router.query.id;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, \"Workflow \", id);\n};\n\nexport async function getStaticProps({\n  params\n}) {\n  // console.log('props');\n  // return {\n  // \tprops: {\n  // \t\tid: params.id\n  // \t}\n  // };\n  return {\n    props: {\n      id: 1\n    }\n  };\n}\nexport async function getStaticPaths() {\n  // const workflowIds = localStorage.getItem('workflowIds');\n  // const jwt = localStorage.getItem('jwt');\n  const jwt = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTkyMzMyOTI1LCJqdGkiOiIyNzhiMjAyMTQyNTY0MWIxYTc5NjJmNGE4NzI2ZjcwNSIsInVzZXJfaWQiOjQ1fQ.rGAuQaDnBaueRKcE6ZE4t7Ym4Y-HbHqFYn-k-iWr1-0'; // console.log(jwtToken);\n\n  console.log(jwt);\n  const workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${jwt}`\n    }\n  });\n  const workflowIdsJson = await workflowIdsResponse.json();\n  console.log(workflowIdsJson);\n  const workflowIdsArray = await workflowIdsJson['workflow-ids'];\n  console.log(workflowIdsArray);\n  const paths = workflowIdsArray.map(workflowId => {\n    return {\n      params: {\n        id: workflowId.toString()\n      }\n    };\n  });\n  console.log(paths);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Workflow;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/workflow/[id].js"],"names":["useDispatch","Router","Workflow","console","log","query","id","getStaticProps","params","props","getStaticPaths","jwt","workflowIdsResponse","fetch","headers","Authorization","workflowIdsJson","json","workflowIdsArray","paths","map","workflowId","toString","fallback"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,KAAnB,EADsB,CAEtB;;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACI,KAAP,CAAaC,EAAxB;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeA,EAAf,CAAP;AACA,CALD;;AAOA,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNH,MAAAA,EAAE,EAAE;AADE;AADD,GAAP;AAKA;AAED,OAAO,eAAeI,cAAf,GAAgC;AACtC;AACA;AACA,QAAMC,GAAG,GACR,iNADD,CAHsC,CAI8K;;AACpNR,EAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACA,QAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACjFC,IAAAA,OAAO,EAAE;AACR,sBAAgB,kBADR;AAERC,MAAAA,aAAa,EAAG,UAASJ,GAAI;AAFrB;AADwE,GAA3C,CAAvC;AAMA,QAAMK,eAAe,GAAG,MAAMJ,mBAAmB,CAACK,IAApB,EAA9B;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYY,eAAZ;AACA,QAAME,gBAAgB,GAAG,MAAMF,eAAe,CAAC,cAAD,CAA9C;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAYc,gBAAZ;AACA,QAAMC,KAAK,GAAGD,gBAAgB,CAACE,GAAjB,CAAsBC,UAAD,IAAgB;AAClD,WAAO;AACNb,MAAAA,MAAM,EAAE;AACPF,QAAAA,EAAE,EAAEe,UAAU,CAACC,QAAX;AADG;AADF,KAAP;AAKA,GANa,CAAd;AAOAnB,EAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACA,SAAO;AACNA,IAAAA,KADM;AAENI,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA;AAED,eAAerB,QAAf","sourcesContent":["import { useDispatch } from 'react-redux';\r\n// import { jwt } from '../../components/JWT';\r\nimport Router from 'next/router';\r\n\r\n// const dispatch = useDispatch();\r\n\r\nconst Workflow = () => {\r\n\tconsole.log(Router.query);\r\n\t// console.log('hi');\r\n\tconst id = Router.query.id;\r\n\treturn <div>Workflow {id}</div>;\r\n};\r\n\r\nexport async function getStaticProps({ params }) {\r\n\t// console.log('props');\r\n\t// return {\r\n\t// \tprops: {\r\n\t// \t\tid: params.id\r\n\t// \t}\r\n\t// };\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tid: 1\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\t// const workflowIds = localStorage.getItem('workflowIds');\r\n\t// const jwt = localStorage.getItem('jwt');\r\n\tconst jwt =\r\n\t\t'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTkyMzMyOTI1LCJqdGkiOiIyNzhiMjAyMTQyNTY0MWIxYTc5NjJmNGE4NzI2ZjcwNSIsInVzZXJfaWQiOjQ1fQ.rGAuQaDnBaueRKcE6ZE4t7Ym4Y-HbHqFYn-k-iWr1-0'; // console.log(jwtToken);\r\n\tconsole.log(jwt);\r\n\tconst workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${jwt}`\r\n\t\t}\r\n\t});\r\n\tconst workflowIdsJson = await workflowIdsResponse.json();\r\n\tconsole.log(workflowIdsJson);\r\n\tconst workflowIdsArray = await workflowIdsJson['workflow-ids'];\r\n\tconsole.log(workflowIdsArray);\r\n\tconst paths = workflowIdsArray.map((workflowId) => {\r\n\t\treturn {\r\n\t\t\tparams: {\r\n\t\t\t\tid: workflowId.toString()\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\tconsole.log(paths);\r\n\treturn {\r\n\t\tpaths,\r\n\t\tfallback: false\r\n\t};\r\n}\r\n\r\nexport default Workflow;\r\n"]},"metadata":{},"sourceType":"module"}