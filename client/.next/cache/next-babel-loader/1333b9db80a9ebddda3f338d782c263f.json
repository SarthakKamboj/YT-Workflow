{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\dashboard\\\\workflows.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/scss/workflows.module.scss';\nimport classnames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setProfileImage } from '../../components/actions/profileImageActions';\nimport { setProfileName } from '../../components/actions/profileNameActions';\nimport { setJwt } from '../../components/actions/jwtAction';\nimport DashboardMenu from '../../components/DashboardMenu';\nimport WorkflowItem from '../../components/WorkflowItem';\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal';\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  // const currentProfileImage = useSelector((state) => state.profileImage);\n  var _useState = useState(null),\n      workflows = _useState[0],\n      setWorkflows = _useState[1];\n\n  var _useState2 = useState(false),\n      displayModal = _useState2[0],\n      setDisplayModal = _useState2[1];\n\n  var jwtToken = useSelector(function (state) {\n    return state.jwtToken;\n  });\n  var dispatch = useDispatch();\n  dispatch(setJwt(''));\n  window.location = '/';\n\n  var getNewJwtToken = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var refreshToken, data, dataStringified, newAccessTokenRes, newAccessTokenJson, newJwtToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              refreshToken = localStorage.getItem('refresh-token');\n              data = {\n                refresh: refreshToken\n              };\n              dataStringified = JSON.stringify(data);\n              _context.next = 5;\n              return fetch('http://127.0.0.1:8000/api/refresh', {\n                method: 'POST',\n                body: dataStringified,\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 5:\n              newAccessTokenRes = _context.sent;\n              _context.next = 8;\n              return newAccessTokenRes.json();\n\n            case 8:\n              newAccessTokenJson = _context.sent;\n              newJwtToken = newAccessTokenJson.access;\n              dispatch(setJwt(newJwtToken)); // window.location = window.location.href;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getNewJwtToken() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getWorkflows = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var workflowsResponse, workflowsJson;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch('http://localhost:8000/get-workflows', {\n                headers: {\n                  Authorization: 'Bearer ' + jwtToken\n                }\n              });\n\n            case 2:\n              workflowsResponse = _context2.sent;\n              _context2.next = 5;\n              return res.json();\n\n            case 5:\n              workflowsJson = _context2.sent;\n\n              if (!workflowsJson.code) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 9;\n              return getNewJwtToken();\n\n            case 9:\n              return _context2.abrupt(\"return\");\n\n            case 10:\n              setWorkflows(workflows);\n              console.log(workflows);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getWorkflows() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    // const tempWorkflows = [\n    // \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] },\n    // \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] },\n    // \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] }\n    // ];\n    // const workflowsResponse = fetch('http://localhost:8000/get-workflows', {\n    // \theaders: {\n    // \t\tAuthorization: 'Bearer ' + jwtToken\n    // \t}\n    // })\n    // \t.then((res) => res.json())\n    // \t.then((workflows) => {\n    // \t\tif (workflows.code) {\n    // \t\t\treturn;\n    // \t\t}\n    // \t\tsetWorkflows(workflows);\n    // \t\tconsole.log(workflows);\n    // \t})\n    // \t.catch((e) => {\n    // \t\tconsole.log(error);\n    // \t\tconsole.log(e);\n    // \t});\n    getWorkflows();\n  }, []);\n\n  var toggleModalVisibility = function toggleModalVisibility() {\n    setDisplayModal(!displayModal);\n  }; // if (currentProfileImage === '') {\n  // \tconst dispatch = useDispatch();\n  // \tdispatch(setProfileImage(props.profileImage));\n  // \tdispatch(setProfileName(props.profileName));\n  // }\n\n\n  return __jsx(\"main\", {\n    className: styles.workflowsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.workflowsMenuContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }\n  }, __jsx(DashboardMenu, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    className: styles.workflowsBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }\n  }, !workflows ? __jsx(\"p\", {\n    className: styles.noWorkflows,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 6\n    }\n  }, \"You don't have any workflows. Let's get one started!\") : __jsx(\"div\", {\n    className: styles.workflowList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 6\n    }\n  }), __jsx(\"div\", {\n    className: styles.addWorkflowBtn,\n    onClick: function onClick() {\n      return toggleModalVisibility();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, \"Add Workflow\")));\n}; // export async function getStaticProps() {\n// \t// const profileImage = 'https://i.imgur.com/0byOhwQ.jpg';\n// \t// const profileName = 'Sarthak Kamboj';\n// \t// return {\n// \t// \tprops: {\n// \t// \t\tprofileImage,\n// \t// \t\tprofileName\n// \t// \t}\n// \t// };\n// }\n\n\n_s(Dashboard, \"E0pe1Bc5vcXzU3h7YGGO92TvYvo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/dashboard/workflows.js"],"names":["styles","classnames","useEffect","useState","useSelector","useDispatch","setProfileImage","setProfileName","setJwt","DashboardMenu","WorkflowItem","CreateWorkflowModal","Dashboard","workflows","setWorkflows","displayModal","setDisplayModal","jwtToken","state","dispatch","window","location","getNewJwtToken","refreshToken","localStorage","getItem","data","refresh","dataStringified","JSON","stringify","fetch","method","body","headers","newAccessTokenRes","json","newAccessTokenJson","newJwtToken","access","getWorkflows","Authorization","workflowsResponse","res","workflowsJson","code","console","log","toggleModalVisibility","workflowsContainer","workflowsMenuContainer","workflowsBody","noWorkflows","workflowList","addWorkflowBtn"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,yCAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,8CAAhC;AACA,SAASC,cAAT,QAA+B,6CAA/B;AACA,SAASC,MAAT,QAAuB,oCAAvB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACvB;AADuB,kBAGaT,QAAQ,CAAC,IAAD,CAHrB;AAAA,MAGfU,SAHe;AAAA,MAGJC,YAHI;;AAAA,mBAImBX,QAAQ,CAAC,KAAD,CAJ3B;AAAA,MAIfY,YAJe;AAAA,MAIDC,eAJC;;AAKvB,MAAMC,QAAQ,GAAGb,WAAW,CAAC,UAACc,KAAD;AAAA,WAAWA,KAAK,CAACD,QAAjB;AAAA,GAAD,CAA5B;AAEA,MAAME,QAAQ,GAAGd,WAAW,EAA5B;AACAc,EAAAA,QAAQ,CAACX,MAAM,CAAC,EAAD,CAAP,CAAR;AACAY,EAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;;AAEA,MAAMC,cAAc;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,cAAAA,YADgB,GACDC,YAAY,CAACC,OAAb,CAAqB,eAArB,CADC;AAEhBC,cAAAA,IAFgB,GAET;AACZC,gBAAAA,OAAO,EAAEJ;AADG,eAFS;AAKhBK,cAAAA,eALgB,GAKEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CALF;AAAA;AAAA,qBAMUK,KAAK,CAAC,mCAAD,EAAsC;AAC1EC,gBAAAA,MAAM,EAAE,MADkE;AAE1EC,gBAAAA,IAAI,EAAEL,eAFoE;AAG1EM,gBAAAA,OAAO,EAAE;AACR,kCAAgB;AADR;AAHiE,eAAtC,CANf;;AAAA;AAMhBC,cAAAA,iBANgB;AAAA;AAAA,qBAaWA,iBAAiB,CAACC,IAAlB,EAbX;;AAAA;AAahBC,cAAAA,kBAbgB;AAchBC,cAAAA,WAdgB,GAcFD,kBAAkB,CAACE,MAdjB;AAetBpB,cAAAA,QAAQ,CAACX,MAAM,CAAC8B,WAAD,CAAP,CAAR,CAfsB,CAgBtB;;AAhBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdhB,cAAc;AAAA;AAAA;AAAA,KAApB;;AAmBA,MAAMkB,YAAY;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYT,KAAK,CAAC,qCAAD,EAAwC;AAC5EG,gBAAAA,OAAO,EAAE;AACRO,kBAAAA,aAAa,EAAE,YAAYxB;AADnB;AADmE,eAAxC,CADjB;;AAAA;AACdyB,cAAAA,iBADc;AAAA;AAAA,qBAMQC,GAAG,CAACP,IAAJ,EANR;;AAAA;AAMdQ,cAAAA,aANc;;AAAA,mBAOhBA,aAAa,CAACC,IAPE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQbvB,cAAc,EARD;;AAAA;AAAA;;AAAA;AAWpBR,cAAAA,YAAY,CAACD,SAAD,CAAZ;AACAiC,cAAAA,OAAO,CAACC,GAAR,CAAYlC,SAAZ;;AAZoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZ2B,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAeAtC,EAAAA,SAAS,CAAC,YAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAsC,IAAAA,YAAY;AACZ,GAxBQ,EAwBN,EAxBM,CAAT;;AA0BA,MAAMQ,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACnChC,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACA,GAFD,CAvEuB,CA2EvB;AACA;AACA;AACA;AACA;;;AAEA,SACC;AAAM,IAAA,SAAS,EAAEf,MAAM,CAACiD,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAEjD,MAAM,CAACkD,sBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,EAIC;AAAK,IAAA,SAAS,EAAElD,MAAM,CAACmD,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAACtC,SAAD,GACA;AAAG,IAAA,SAAS,EAAEb,MAAM,CAACoD,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADA,GAGA;AAAK,IAAA,SAAS,EAAEpD,MAAM,CAACqD,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAoBC;AAAK,IAAA,SAAS,EAAErD,MAAM,CAACsD,cAAvB;AAAuC,IAAA,OAAO,EAAE;AAAA,aAAMN,qBAAqB,EAA3B;AAAA,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBD,CAJD,CADD;AAiCA,CAlHD,C,CAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA7HMpC,S;UAKYR,W,EAEAC,W;;;KAPZO,S;AA+HN,eAAeA,SAAf","sourcesContent":["import styles from '../../styles/scss/workflows.module.scss';\r\nimport classnames from 'classnames';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setProfileImage } from '../../components/actions/profileImageActions';\r\nimport { setProfileName } from '../../components/actions/profileNameActions';\r\nimport { setJwt } from '../../components/actions/jwtAction';\r\nimport DashboardMenu from '../../components/DashboardMenu';\r\nimport WorkflowItem from '../../components/WorkflowItem';\r\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal';\r\n\r\nconst Dashboard = () => {\r\n\t// const currentProfileImage = useSelector((state) => state.profileImage);\r\n\r\n\tconst [ workflows, setWorkflows ] = useState(null);\r\n\tconst [ displayModal, setDisplayModal ] = useState(false);\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tdispatch(setJwt(''));\r\n\twindow.location = '/';\r\n\r\n\tconst getNewJwtToken = async () => {\r\n\t\tconst refreshToken = localStorage.getItem('refresh-token');\r\n\t\tconst data = {\r\n\t\t\trefresh: refreshToken\r\n\t\t};\r\n\t\tconst dataStringified = JSON.stringify(data);\r\n\t\tconst newAccessTokenRes = await fetch('http://127.0.0.1:8000/api/refresh', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: dataStringified,\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst newAccessTokenJson = await newAccessTokenRes.json();\r\n\t\tconst newJwtToken = newAccessTokenJson.access;\r\n\t\tdispatch(setJwt(newJwtToken));\r\n\t\t// window.location = window.location.href;\r\n\t};\r\n\r\n\tconst getWorkflows = async () => {\r\n\t\tconst workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst workflowsJson = await res.json();\r\n\t\tif (workflowsJson.code) {\r\n\t\t\tawait getNewJwtToken();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetWorkflows(workflows);\r\n\t\tconsole.log(workflows);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t// const tempWorkflows = [\r\n\t\t// \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] },\r\n\t\t// \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] },\r\n\t\t// \t{ title: 'Workflow 1', keywords: [ 'blog', 'comedy' ] }\r\n\t\t// ];\r\n\t\t// const workflowsResponse = fetch('http://localhost:8000/get-workflows', {\r\n\t\t// \theaders: {\r\n\t\t// \t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t// \t}\r\n\t\t// })\r\n\t\t// \t.then((res) => res.json())\r\n\t\t// \t.then((workflows) => {\r\n\t\t// \t\tif (workflows.code) {\r\n\t\t// \t\t\treturn;\r\n\t\t// \t\t}\r\n\t\t// \t\tsetWorkflows(workflows);\r\n\t\t// \t\tconsole.log(workflows);\r\n\t\t// \t})\r\n\t\t// \t.catch((e) => {\r\n\t\t// \t\tconsole.log(error);\r\n\t\t// \t\tconsole.log(e);\r\n\t\t// \t});\r\n\t\tgetWorkflows();\r\n\t}, []);\r\n\r\n\tconst toggleModalVisibility = () => {\r\n\t\tsetDisplayModal(!displayModal);\r\n\t};\r\n\r\n\t// if (currentProfileImage === '') {\r\n\t// \tconst dispatch = useDispatch();\r\n\t// \tdispatch(setProfileImage(props.profileImage));\r\n\t// \tdispatch(setProfileName(props.profileName));\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<main className={styles.workflowsContainer}>\r\n\t\t\t<div className={styles.workflowsMenuContainer}>\r\n\t\t\t\t<DashboardMenu />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.workflowsBody}>\r\n\t\t\t\t{!workflows ? (\r\n\t\t\t\t\t<p className={styles.noWorkflows}>You don't have any workflows. Let's get one started!</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className={styles.workflowList}>\r\n\t\t\t\t\t\t{/* {workflows.map((workflow) => (\r\n\t\t\t\t\t\t\t<WorkflowItem workflow={workflow} key={workflow.title} />\r\n\t\t\t\t\t\t\t// <div className={styles.workflow} key={index}>\r\n\t\t\t\t\t\t\t// <div className={styles.workflowTitle}>{workflow.title}</div>\r\n\t\t\t\t\t\t\t// \t<ul className={styles.workflowKeywords}>\r\n\t\t\t\t\t\t\t// \t\t{workflow.keywords.map(keyword=>(\r\n\t\t\t\t\t\t\t// \t\t\t<li key={keyword}>\r\n\t\t\t\t\t\t\t// \t\t\t\t{capitalize(keyword)}\r\n\t\t\t\t\t\t\t// \t\t\t</li>\r\n\t\t\t\t\t\t\t// \t\t))}\r\n\t\t\t\t\t\t\t// \t</ul>\r\n\t\t\t\t\t\t\t// </div>\r\n\t\t\t\t\t\t))} */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t<div className={styles.addWorkflowBtn} onClick={() => toggleModalVisibility()}>\r\n\t\t\t\t\tAdd Workflow\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <CreateWorkflowModal displayModal={displayModal} toggleModalVisibility={toggleModalVisibility} /> */}\r\n\t\t\t\t{/* <Link href=\"\" */}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\n// export async function getStaticProps() {\r\n// \t// const profileImage = 'https://i.imgur.com/0byOhwQ.jpg';\r\n// \t// const profileName = 'Sarthak Kamboj';\r\n// \t// return {\r\n// \t// \tprops: {\r\n// \t// \t\tprofileImage,\r\n// \t// \t\tprofileName\r\n// \t// \t}\r\n// \t// };\r\n// }\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}