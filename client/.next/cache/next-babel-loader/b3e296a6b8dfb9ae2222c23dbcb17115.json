{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\workflow\\\\[id].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector } from 'react-redux'; // import { jwt } from '../../components/JWT';\n\nimport Router from 'next/router';\nimport { useState, useEffect } from 'react'; // const dispatch = useDispatch();\n\nvar Workflow = function Workflow() {\n  _s();\n\n  console.log(Router.pathname);\n  var jwtToken = useSelector(function (state) {\n    return state.jwtToken;\n  });\n\n  var _useState = useState([]),\n      audioUrls = _useState[0],\n      setAudioUrls = _useState[1];\n\n  var _useState2 = useState([]),\n      imageUrls = _useState2[0],\n      setImageUrls = _useState2[1];\n\n  var _useState3 = useState([]),\n      videoUrls = _useState3[0],\n      setVideoUrls = _useState3[1];\n\n  var _useState4 = useState([]),\n      videoEditingUrls = _useState4[0],\n      setVideoEditingUrls = _useState4[1];\n\n  var id = Router.query.id;\n  useEffect(function () {\n    fetch(\"http://127.0.0.1:8000/get-workflow-files/\".concat(id), {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(jwtToken)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (filesJson) {\n      console.log(filesJson['workflow-file-urls']);\n      setFileUrls(filesJson['workflow-file-urls']);\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  }, []); // console.log('hi');\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, fileUrls);\n};\n\n_s(Workflow, \"uWDcoczCAX6LEOiZM+UCyzUHQQM=\", false, function () {\n  return [useSelector];\n});\n\n_c = Workflow;\nexport var __N_SSG = true;\nexport default Workflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workflow\");","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/workflow/[id].js"],"names":["useSelector","Router","useState","useEffect","Workflow","console","log","pathname","jwtToken","state","audioUrls","setAudioUrls","imageUrls","setImageUrls","videoUrls","setVideoUrls","videoEditingUrls","setVideoEditingUrls","id","query","fetch","headers","Authorization","then","res","json","filesJson","setFileUrls","err","fileUrls"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,QAAnB;AACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACD,QAAjB;AAAA,GAAD,CAA5B;;AAFsB,kBAIcN,QAAQ,CAAC,EAAD,CAJtB;AAAA,MAIdQ,SAJc;AAAA,MAIHC,YAJG;;AAAA,mBAKcT,QAAQ,CAAC,EAAD,CALtB;AAAA,MAKdU,SALc;AAAA,MAKHC,YALG;;AAAA,mBAMcX,QAAQ,CAAC,EAAD,CANtB;AAAA,MAMdY,SANc;AAAA,MAMHC,YANG;;AAAA,mBAO4Bb,QAAQ,CAAC,EAAD,CAPpC;AAAA,MAOdc,gBAPc;AAAA,MAOIC,mBAPJ;;AAQtB,MAAMC,EAAE,GAAGjB,MAAM,CAACkB,KAAP,CAAaD,EAAxB;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACfiB,IAAAA,KAAK,oDAA6CF,EAA7C,GAAmD;AACvDG,MAAAA,OAAO,EAAE;AACR,wBAAgB,kBADR;AAERC,QAAAA,aAAa,mBAAYd,QAAZ;AAFL;AAD8C,KAAnD,CAAL,CAMEe,IANF,CAMO,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KANP,EAOEF,IAPF,CAOO,UAACG,SAAD,EAAe;AACpBrB,MAAAA,OAAO,CAACC,GAAR,CAAYoB,SAAS,CAAC,oBAAD,CAArB;AACAC,MAAAA,WAAW,CAACD,SAAS,CAAC,oBAAD,CAAV,CAAX;AACA,KAVF,WAWQ,UAACE,GAAD;AAAA,aAASvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAAT;AAAA,KAXR;AAYA,GAbQ,EAaN,EAbM,CAAT,CAVsB,CAyBtB;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,QAAN,CAAP;AACA,CA3BD;;GAAMzB,Q;UAEYJ,W;;;KAFZI,Q;;AAoEN,eAAeA,QAAf","sourcesContent":["import { useSelector } from 'react-redux';\r\n// import { jwt } from '../../components/JWT';\r\nimport Router from 'next/router';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// const dispatch = useDispatch();\r\n\r\nconst Workflow = () => {\r\n\tconsole.log(Router.pathname);\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\r\n\tconst [ audioUrls, setAudioUrls ] = useState([]);\r\n\tconst [ imageUrls, setImageUrls ] = useState([]);\r\n\tconst [ videoUrls, setVideoUrls ] = useState([]);\r\n\tconst [ videoEditingUrls, setVideoEditingUrls ] = useState([]);\r\n\tconst id = Router.query.id;\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(`http://127.0.0.1:8000/get-workflow-files/${id}`, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${jwtToken}`\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((filesJson) => {\r\n\t\t\t\tconsole.log(filesJson['workflow-file-urls']);\r\n\t\t\t\tsetFileUrls(filesJson['workflow-file-urls']);\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t}, []);\r\n\r\n\t// console.log('hi');\r\n\treturn <div>{fileUrls}</div>;\r\n};\r\n\r\nexport async function getStaticProps({ params }) {\r\n\tconsole.log('props');\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tid: params.id\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\t// const workflowIds = localStorage.getItem('workflowIds');\r\n\t// const jwt = localStorage.getItem('jwt');\r\n\tconst jwt =\r\n\t\t'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTkyMzMyOTI1LCJqdGkiOiIyNzhiMjAyMTQyNTY0MWIxYTc5NjJmNGE4NzI2ZjcwNSIsInVzZXJfaWQiOjQ1fQ.rGAuQaDnBaueRKcE6ZE4t7Ym4Y-HbHqFYn-k-iWr1-0'; // console.log(jwtToken);\r\n\tconsole.log(jwt);\r\n\tconst workflowIdsResponse = await fetch('http://localhost:8000/get-workflow-ids', {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${jwt}`\r\n\t\t}\r\n\t});\r\n\tconst workflowIdsJson = await workflowIdsResponse.json();\r\n\tconsole.log(workflowIdsJson);\r\n\tconst workflowIdsArray = await workflowIdsJson['workflow-ids'];\r\n\tconsole.log(workflowIdsArray);\r\n\tconst paths = workflowIdsArray.map((workflowId) => {\r\n\t\treturn {\r\n\t\t\tparams: {\r\n\t\t\t\tid: workflowId.toString()\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\tconsole.log(paths);\r\n\treturn {\r\n\t\tpaths,\r\n\t\tfallback: false\r\n\t};\r\n}\r\n\r\nexport default Workflow;\r\n"]},"metadata":{},"sourceType":"module"}