{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\pages\\\\dashboard\\\\starred.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/scss/workflows.module.scss';\nimport classnames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setProfileImage } from '../../components/actions/profileImageActions';\nimport { setProfileName } from '../../components/actions/profileNameActions';\nimport { setJwt } from '../../components/actions/jwtAction';\nimport { setWorkflowInfo } from '../../components/actions/workflowInfo';\nimport DashboardMenu from '../../components/DashboardMenu';\nimport WorkflowItem from '../../components/WorkflowItem';\nimport Cookie from 'js-cookie'; // import { jwt, setJwtInJS } from '../../components/JWT';\n\nimport Router from 'next/router';\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal'; // import { setJwtInJS } from '../../components/JWT';\n\nimport Link from 'next/link';\n\nconst StarredWorkflows = () => {\n  // const currentProfileImage = useSelector((state) => state.profileImage);\n  const {\n    0: workflows,\n    1: setWorkflows\n  } = useState(null);\n  const {\n    0: displayModal,\n    1: setDisplayModal\n  } = useState(false);\n  const jwtToken = useSelector(state => state.jwtToken);\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  if (jwtToken === '') {\n    Router.push('/');\n  }\n\n  const setWorkflowIdsInLocalStorage = workflowsInfo => {\n    const workflowIds = workflowsInfo.map(workflowInfo => workflowInfo.id);\n\n    if (!localStorage.getItem('workflowIds')) {\n      localStorage.setItem('workflowIds', workflowIds);\n    }\n  };\n\n  const getNewJwtToken = async () => {\n    const refreshToken = localStorage.getItem('refresh-token');\n    const data = {\n      refresh: refreshToken\n    };\n    const dataStringified = JSON.stringify(data);\n    const newAccessTokenRes = await fetch('http://127.0.0.1:8000/api/refresh', {\n      method: 'POST',\n      body: dataStringified,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const newAccessTokenJson = await newAccessTokenRes.json();\n\n    if (newAccessTokenJson.detail === 'Token is invalid or expired') {\n      localStorage.setItem('refresh-token', '');\n      Cookie.set('jwt', JSON.stringify(''));\n      Cookie.set('refresh-token', JSON.stringify(''));\n      dispatch(setJwt(''));\n      return Router.push('/');\n    }\n\n    const newJwtToken = newAccessTokenJson.access;\n    dispatch(setJwt(newJwtToken));\n    localStorage.setItem('jwt', newJwtToken);\n    Cookie.set('jwt', JSON.stringify(newJwtToken));\n    const workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\n      headers: {\n        Authorization: 'Bearer ' + newJwtToken\n      }\n    });\n    const workflowsJson = await workflowsResponse.json();\n    const allWorkflows = workflowsJson['workflows'];\n    const starredWorkflows = allWorkflows.map(workflow => workflow['starred']);\n    setWorkflows(starredWorkflows); // dispatch(setWorkflowInfo(workflowsJson['workflows']));\n    // setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\n  };\n\n  const getWorkflows = async () => {\n    const jwtBearerString = 'Bearer ' + jwtToken;\n    const workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\n      headers: {\n        Authorization: jwtBearerString\n      }\n    });\n    const workflowsJson = await workflowsResponse.json();\n\n    if (workflowsJson.code) {\n      await getNewJwtToken();\n      return;\n    }\n\n    const allWorkflows = workflowsJson['workflows'];\n    const starredWorkflows = allWorkflows.map(workflow => workflow['starred']); // console.log('jwt: ' + jwt);\n\n    console.log(starredWorkflows);\n    setWorkflows(starredWorkflows); // dispatch(setWorkflowInfo(workflowsJson['workflows']));\n    // setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\n  };\n\n  useEffect(() => {\n    getWorkflows();\n  }, []); // const createWorkflow = async () => {\n  //     const res = await fetch('http://localhost:8000/create-workflow', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             Authorization: 'Bearer ' + jwtToken\n  //         }\n  //     });\n  //     const resJson = await res.json();\n  //     const newWorkflowInfo = resJson['workflow'];\n  //     Router.push(`/../workflow/${newWorkflowInfo.id}`);\n  // };\n\n  return __jsx(\"main\", {\n    className: styles.workflowsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.dashboardMenuContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }\n  }, __jsx(DashboardMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  })), __jsx(\"div\", {\n    className: styles.workflowsBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }, !workflows ? __jsx(\"p\", {\n    className: styles.noWorkflows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 6\n    }\n  }, \"You don't have any workflows. Let's get one started!\") : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 6\n    }\n  }, __jsx(\"h1\", {\n    className: styles.numWorkflows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, workflows.length, \" Workflows\"), __jsx(\"div\", {\n    className: styles.workflowList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, workflows.map(workflow => // <Link href={`../workflow/[id]`} as={`../workflow/${workflow.id}`}>\n  __jsx(\"a\", {\n    href: `../workflow/${workflow.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, __jsx(WorkflowItem, {\n    workflow: workflow,\n    key: workflow.id,\n    id: workflow.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }\n  })) // </Link>\n  )))));\n};\n\nexport default StarredWorkflows;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/pages/dashboard/starred.js"],"names":["styles","classnames","useEffect","useState","useSelector","useDispatch","setProfileImage","setProfileName","setJwt","setWorkflowInfo","DashboardMenu","WorkflowItem","Cookie","Router","CreateWorkflowModal","Link","StarredWorkflows","workflows","setWorkflows","displayModal","setDisplayModal","jwtToken","state","dispatch","push","setWorkflowIdsInLocalStorage","workflowsInfo","workflowIds","map","workflowInfo","id","localStorage","getItem","setItem","getNewJwtToken","refreshToken","data","refresh","dataStringified","JSON","stringify","newAccessTokenRes","fetch","method","body","headers","newAccessTokenJson","json","detail","set","newJwtToken","access","workflowsResponse","Authorization","workflowsJson","allWorkflows","starredWorkflows","workflow","getWorkflows","jwtBearerString","code","console","log","workflowsContainer","dashboardMenuContainer","workflowsBody","noWorkflows","numWorkflows","length","workflowList"],"mappings":"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","sourcesContent":["import styles from '../../styles/scss/workflows.module.scss';\r\nimport classnames from 'classnames';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setProfileImage } from '../../components/actions/profileImageActions';\r\nimport { setProfileName } from '../../components/actions/profileNameActions';\r\nimport { setJwt } from '../../components/actions/jwtAction';\r\nimport { setWorkflowInfo } from '../../components/actions/workflowInfo';\r\nimport DashboardMenu from '../../components/DashboardMenu';\r\nimport WorkflowItem from '../../components/WorkflowItem';\r\nimport Cookie from 'js-cookie';\r\n// import { jwt, setJwtInJS } from '../../components/JWT';\r\nimport Router from 'next/router';\r\nimport CreateWorkflowModal from '../../components/CreateWorkflowModal';\r\n// import { setJwtInJS } from '../../components/JWT';\r\nimport Link from 'next/link';\r\n\r\nconst StarredWorkflows = () => {\r\n\t// const currentProfileImage = useSelector((state) => state.profileImage);\r\n\tconst [ workflows, setWorkflows ] = useState(null);\r\n\tconst [ displayModal, setDisplayModal ] = useState(false);\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector((state) => state);\r\n\tif (jwtToken === '') {\r\n\t\tRouter.push('/');\r\n\t}\r\n\r\n\tconst setWorkflowIdsInLocalStorage = (workflowsInfo) => {\r\n\t\tconst workflowIds = workflowsInfo.map((workflowInfo) => workflowInfo.id);\r\n\t\tif (!localStorage.getItem('workflowIds')) {\r\n\t\t\tlocalStorage.setItem('workflowIds', workflowIds);\r\n\t\t}\r\n\t};\r\n\r\n\tconst getNewJwtToken = async () => {\r\n\t\tconst refreshToken = localStorage.getItem('refresh-token');\r\n\t\tconst data = {\r\n\t\t\trefresh: refreshToken\r\n\t\t};\r\n\t\tconst dataStringified = JSON.stringify(data);\r\n\t\tconst newAccessTokenRes = await fetch('http://127.0.0.1:8000/api/refresh', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: dataStringified,\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst newAccessTokenJson = await newAccessTokenRes.json();\r\n\t\tif (newAccessTokenJson.detail === 'Token is invalid or expired') {\r\n\t\t\tlocalStorage.setItem('refresh-token', '');\r\n\t\t\tCookie.set('jwt', JSON.stringify(''));\r\n\t\t\tCookie.set('refresh-token', JSON.stringify(''));\r\n\t\t\tdispatch(setJwt(''));\r\n\t\t\treturn Router.push('/');\r\n\t\t}\r\n\t\tconst newJwtToken = newAccessTokenJson.access;\r\n\t\tdispatch(setJwt(newJwtToken));\r\n\t\tlocalStorage.setItem('jwt', newJwtToken);\r\n\t\tCookie.set('jwt', JSON.stringify(newJwtToken));\r\n\t\tconst workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + newJwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst workflowsJson = await workflowsResponse.json();\r\n\t\tconst allWorkflows = workflowsJson['workflows'];\r\n\t\tconst starredWorkflows = allWorkflows.map((workflow) => workflow['starred']);\r\n\t\tsetWorkflows(starredWorkflows);\r\n\t\t// dispatch(setWorkflowInfo(workflowsJson['workflows']));\r\n\t\t// setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\r\n\t};\r\n\r\n\tconst getWorkflows = async () => {\r\n\t\tconst jwtBearerString = 'Bearer ' + jwtToken;\r\n\t\tconst workflowsResponse = await fetch('http://localhost:8000/get-workflows', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: jwtBearerString\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst workflowsJson = await workflowsResponse.json();\r\n\r\n\t\tif (workflowsJson.code) {\r\n\t\t\tawait getNewJwtToken();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst allWorkflows = workflowsJson['workflows'];\r\n\t\tconst starredWorkflows = allWorkflows.map((workflow) => workflow['starred']);\r\n\t\t// console.log('jwt: ' + jwt);\r\n\t\tconsole.log(starredWorkflows);\r\n\t\tsetWorkflows(starredWorkflows);\r\n\t\t// dispatch(setWorkflowInfo(workflowsJson['workflows']));\r\n\t\t// setWorkflowIdsInLocalStorage(workflowsJson['workflows']);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetWorkflows();\r\n\t}, []);\r\n\r\n\t// const createWorkflow = async () => {\r\n\t//     const res = await fetch('http://localhost:8000/create-workflow', {\r\n\t//         method: 'POST',\r\n\t//         headers: {\r\n\t//             'Content-Type': 'application/json',\r\n\t//             Authorization: 'Bearer ' + jwtToken\r\n\t//         }\r\n\t//     });\r\n\t//     const resJson = await res.json();\r\n\t//     const newWorkflowInfo = resJson['workflow'];\r\n\t//     Router.push(`/../workflow/${newWorkflowInfo.id}`);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<main className={styles.workflowsContainer}>\r\n\t\t\t<div className={styles.dashboardMenuContainer}>\r\n\t\t\t\t<DashboardMenu />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.workflowsBody}>\r\n\t\t\t\t{!workflows ? (\r\n\t\t\t\t\t<p className={styles.noWorkflows}>You don't have any workflows. Let's get one started!</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<h1 className={styles.numWorkflows}>{workflows.length} Workflows</h1>\r\n\t\t\t\t\t\t<div className={styles.workflowList}>\r\n\t\t\t\t\t\t\t{workflows.map((workflow) => (\r\n\t\t\t\t\t\t\t\t// <Link href={`../workflow/[id]`} as={`../workflow/${workflow.id}`}>\r\n\t\t\t\t\t\t\t\t<a href={`../workflow/${workflow.id}`}>\r\n\t\t\t\t\t\t\t\t\t<WorkflowItem workflow={workflow} key={workflow.id} id={workflow.id} />\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t// </Link>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t)}\r\n\t\t\t\t{/* <div className={styles.addWorkflowBtn} onClick={() => createWorkflow()}>\r\n                Add Workflow\r\n            </div> */}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default StarredWorkflows;\r\n"]},"metadata":{},"sourceType":"module"}