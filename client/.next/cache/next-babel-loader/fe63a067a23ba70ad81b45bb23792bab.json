{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sarthak\\\\YT_Workflow_Cloud\\\\client\\\\components\\\\Share.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport styles from '../styles/scss/share.module.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport Joi from '@hapi/joi';\n\nconst Share = ({\n  id\n}) => {\n  const jwtToken = useSelector(state => state.jwtToken);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState();\n  const {\n    0: hideContent,\n    1: setHideContent\n  } = useState();\n  const {\n    0: inputActive,\n    1: setInputActive\n  } = useState();\n  const {\n    0: inputText,\n    1: setInputText\n  } = useState('');\n  const {\n    0: profileImagesInfo,\n    1: setProfileImagesInfo\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const schema = Joi.object({\n    email: Joi.string().email({\n      minDomainSegments: 2,\n      tlds: {\n        allow: ['com', 'net']\n      }\n    })\n  });\n\n  const getProfileImages = async () => {\n    const imageUrlsRes = await fetch(`http://localhost:8000/get-workflow-profile-images/${id}`, {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + jwtToken\n      }\n    });\n    const imageUrlsJson = await imageUrlsRes.json();\n    setProfileImagesInfo(Object.entries(imageUrlsJson['urls']));\n  };\n\n  useEffect(() => {\n    setModalVisible(false);\n    setHideContent(true);\n    setInputActive(false);\n    getProfileImages();\n  }, []);\n\n  const capitalize = str => {\n    return str.slice(0, 1).toUpperCase() + str.slice(1);\n  };\n\n  const shareWorkflow = async () => {\n    const validation = schema.validate({\n      email: inputText\n    });\n\n    if (validation.error) {\n      setError('**' + capitalize(validation.error.toString().replace('ValidationError: ', '').replace(`\"`, ``).replace(`\"`, '')));\n      return;\n    }\n\n    const shareRes = await fetch(`http://localhost:8000/share-workflow/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + jwtToken\n      },\n      body: JSON.stringify({\n        email: inputText\n      })\n    });\n    const shareJson = await shareRes.json();\n\n    if (shareJson.msg == 'Account matching query does not exist.') {\n      setError('**User does not exist.');\n      return;\n    }\n\n    setInputText('');\n    setError('');\n    await getProfileImages();\n  };\n\n  const toggleModal = () => {\n    if (!modalVisible) {\n      setTimeout(() => {\n        setHideContent(false);\n      }, 250);\n    } else {\n      setHideContent(true);\n      setInputText('');\n      setError('');\n    }\n\n    setModalVisible(!modalVisible);\n  };\n\n  const toggleInputActive = () => {\n    setInputActive(!inputActive);\n  };\n\n  const updateInputText = e => {\n    setInputText(e.target.value);\n  };\n\n  const unshareWorkflow = async email => {\n    const unshareRes = await fetch(`http://localhost:8000/unshare-workflow/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + jwtToken\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const unshareJson = await unshareRes.json();\n\n    if (unshareJson['msg'] === 'The user and the user being unshared are the same. They must be different.') {\n      setError('**You cannot unshare yourself.');\n      return;\n    }\n\n    setError('');\n    await getProfileImages();\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: classnames({\n      [styles.shareModalNotVisible]: true,\n      [styles.shareModalVisible]: modalVisible,\n      [styles.contentsHidden]: hideContent\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 4\n    }\n  }, __jsx(\"p\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: \"user-plus\",\n    className: styles.addUserIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 6\n    }\n  }), __jsx(\"span\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 6\n    }\n  }, \"Share with Other People\")), __jsx(\"div\", {\n    className: styles.inputSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    onClick: toggleInputActive,\n    onBlur: toggleInputActive,\n    type: \"email\",\n    className: styles.emailInput,\n    onChange: updateInputText,\n    value: inputText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 6\n    }\n  }), __jsx(\"div\", {\n    className: classnames({\n      [styles.inputBorderBottom]: true,\n      [styles.inputBorderBottomActive]: inputActive\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 6\n    }\n  }), __jsx(\"p\", {\n    className: classnames({\n      [styles.hoverLabel]: inputText !== ''\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 6\n    }\n  }, \"Add People\")), __jsx(\"p\", {\n    className: styles.usersHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, \"Current Users\"), __jsx(\"ul\", {\n    className: styles.workflowUsersList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, profileImagesInfo.map((profileImageInfo, index) => __jsx(\"li\", {\n    key: profileImageInfo[0],\n    className: styles.workflowUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: profileImageInfo[1],\n    className: styles.workflowUserProfileImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 8\n    }\n  }), __jsx(\"p\", {\n    className: styles.workflowUserEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 8\n    }\n  }, profileImageInfo[0]), index !== 0 ? __jsx(FontAwesomeIcon, {\n    className: styles.unshareBtn,\n    icon: 'times',\n    onClick: () => unshareWorkflow(profileImageInfo[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }) : __jsx(\"span\", {\n    className: styles.owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, \"(Owner)\")))), __jsx(\"div\", {\n    className: styles.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 6\n    }\n  }, error), __jsx(\"div\", {\n    className: styles.shareBtn,\n    onClick: shareWorkflow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 6\n    }\n  }, \"Done\"))), __jsx(\"div\", {\n    className: styles.shareBtn,\n    onClick: () => toggleModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: \"users\",\n    className: styles.shareIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, \"Share\")), __jsx(\"div\", {\n    onClick: toggleModal,\n    className: classnames({\n      [styles.backdropNotVisible]: true,\n      [styles.backdropVisible]: modalVisible\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Share;","map":{"version":3,"sources":["C:/Sarthak/YT_Workflow_Cloud/client/components/Share.js"],"names":["FontAwesomeIcon","styles","useState","useEffect","useRef","classnames","useSelector","Joi","Share","id","jwtToken","state","modalVisible","setModalVisible","hideContent","setHideContent","inputActive","setInputActive","inputText","setInputText","profileImagesInfo","setProfileImagesInfo","error","setError","schema","object","email","string","minDomainSegments","tlds","allow","getProfileImages","imageUrlsRes","fetch","headers","Authorization","imageUrlsJson","json","Object","entries","capitalize","str","slice","toUpperCase","shareWorkflow","validation","validate","toString","replace","shareRes","method","body","JSON","stringify","shareJson","msg","toggleModal","setTimeout","toggleInputActive","updateInputText","e","target","value","unshareWorkflow","unshareRes","unshareJson","shareModalNotVisible","shareModalVisible","contentsHidden","title","addUserIcon","heading","inputSection","emailInput","inputBorderBottom","inputBorderBottomActive","hoverLabel","usersHeading","workflowUsersList","map","profileImageInfo","index","workflowUsers","workflowUserProfileImage","workflowUserEmail","unshareBtn","owner","footer","shareBtn","shareIcon","backdropNotVisible","backdropVisible"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport styles from '../styles/scss/share.module.scss';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport classnames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport Joi from '@hapi/joi';\r\n\r\nconst Share = ({ id }) => {\r\n\tconst jwtToken = useSelector((state) => state.jwtToken);\r\n\tconst [ modalVisible, setModalVisible ] = useState();\r\n\tconst [ hideContent, setHideContent ] = useState();\r\n\tconst [ inputActive, setInputActive ] = useState();\r\n\tconst [ inputText, setInputText ] = useState('');\r\n\r\n\tconst [ profileImagesInfo, setProfileImagesInfo ] = useState([]);\r\n\tconst [ error, setError ] = useState('');\r\n\r\n\tconst schema = Joi.object({\r\n\t\temail: Joi.string().email({ minDomainSegments: 2, tlds: { allow: [ 'com', 'net' ] } })\r\n\t});\r\n\r\n\tconst getProfileImages = async () => {\r\n\t\tconst imageUrlsRes = await fetch(`http://localhost:8000/get-workflow-profile-images/${id}`, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst imageUrlsJson = await imageUrlsRes.json();\r\n\t\tsetProfileImagesInfo(Object.entries(imageUrlsJson['urls']));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetModalVisible(false);\r\n\t\tsetHideContent(true);\r\n\t\tsetInputActive(false);\r\n\t\tgetProfileImages();\r\n\t}, []);\r\n\r\n\tconst capitalize = (str) => {\r\n\t\treturn str.slice(0, 1).toUpperCase() + str.slice(1);\r\n\t};\r\n\r\n\tconst shareWorkflow = async () => {\r\n\t\tconst validation = schema.validate({ email: inputText });\r\n\t\tif (validation.error) {\r\n\t\t\tsetError(\r\n\t\t\t\t'**' +\r\n\t\t\t\t\tcapitalize(\r\n\t\t\t\t\t\tvalidation.error.toString().replace('ValidationError: ', '').replace(`\"`, ``).replace(`\"`, '')\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst shareRes = await fetch(`http://localhost:8000/share-workflow/${id}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\temail: inputText\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tconst shareJson = await shareRes.json();\r\n\r\n\t\tif (shareJson.msg == 'Account matching query does not exist.') {\r\n\t\t\tsetError('**User does not exist.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetInputText('');\r\n\t\tsetError('');\r\n\t\tawait getProfileImages();\r\n\t};\r\n\r\n\tconst toggleModal = () => {\r\n\t\tif (!modalVisible) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetHideContent(false);\r\n\t\t\t}, 250);\r\n\t\t} else {\r\n\t\t\tsetHideContent(true);\r\n\t\t\tsetInputText('');\r\n\t\t\tsetError('');\r\n\t\t}\r\n\t\tsetModalVisible(!modalVisible);\r\n\t};\r\n\r\n\tconst toggleInputActive = () => {\r\n\t\tsetInputActive(!inputActive);\r\n\t};\r\n\r\n\tconst updateInputText = (e) => {\r\n\t\tsetInputText(e.target.value);\r\n\t};\r\n\r\n\tconst unshareWorkflow = async (email) => {\r\n\t\tconst unshareRes = await fetch(`http://localhost:8000/unshare-workflow/${id}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t\tAuthorization: 'Bearer ' + jwtToken\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\temail\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tconst unshareJson = await unshareRes.json();\r\n\r\n\t\tif (unshareJson['msg'] === 'The user and the user being unshared are the same. They must be different.') {\r\n\t\t\tsetError('**You cannot unshare yourself.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetError('');\r\n\t\tawait getProfileImages();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div\r\n\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t[styles.shareModalNotVisible]: true,\r\n\t\t\t\t\t[styles.shareModalVisible]: modalVisible,\r\n\t\t\t\t\t[styles.contentsHidden]: hideContent\r\n\t\t\t\t})}\r\n\t\t\t>\r\n\t\t\t\t<p className={styles.title}>\r\n\t\t\t\t\t<FontAwesomeIcon icon=\"user-plus\" className={styles.addUserIcon} />\r\n\t\t\t\t\t<span className={styles.heading}>Share with Other People</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className={styles.inputSection}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonClick={toggleInputActive}\r\n\t\t\t\t\t\tonBlur={toggleInputActive}\r\n\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\tclassName={styles.emailInput}\r\n\t\t\t\t\t\tonChange={updateInputText}\r\n\t\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={classnames({\r\n\t\t\t\t\t\t\t[styles.inputBorderBottom]: true,\r\n\t\t\t\t\t\t\t[styles.inputBorderBottomActive]: inputActive\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<p className={classnames({ [styles.hoverLabel]: inputText !== '' })}>Add People</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p className={styles.usersHeading}>Current Users</p>\r\n\t\t\t\t<ul className={styles.workflowUsersList}>\r\n\t\t\t\t\t{profileImagesInfo.map((profileImageInfo, index) => (\r\n\t\t\t\t\t\t<li key={profileImageInfo[0]} className={styles.workflowUsers}>\r\n\t\t\t\t\t\t\t<img src={profileImageInfo[1]} className={styles.workflowUserProfileImage} />\r\n\t\t\t\t\t\t\t<p className={styles.workflowUserEmail}>{profileImageInfo[0]}</p>\r\n\t\t\t\t\t\t\t{index !== 0 ? (\r\n\t\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\t\tclassName={styles.unshareBtn}\r\n\t\t\t\t\t\t\t\t\ticon={'times'}\r\n\t\t\t\t\t\t\t\t\tonClick={() => unshareWorkflow(profileImageInfo[0])}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<span className={styles.owner}>(Owner)</span>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t\t<div className={styles.footer}>\r\n\t\t\t\t\t<p>{error}</p>\r\n\t\t\t\t\t<div className={styles.shareBtn} onClick={shareWorkflow}>\r\n\t\t\t\t\t\tDone\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.shareBtn} onClick={() => toggleModal()}>\r\n\t\t\t\t<FontAwesomeIcon icon=\"users\" className={styles.shareIcon} />\r\n\t\t\t\t<p>Share</p>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tonClick={toggleModal}\r\n\t\t\t\tclassName={classnames({ [styles.backdropNotVisible]: true, [styles.backdropVisible]: modalVisible })}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Share;\r\n"]},"metadata":{},"sourceType":"module"}